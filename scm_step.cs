/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class scm_step : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal scm_step(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(scm_step obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~scm_step() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SCMPINVOKE.delete_scm_step(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public scm_step() : this(SCMPINVOKE.new_scm_step__SWIG_0(), true) {
  }

  public scm_step(scm_step arg0) : this(SCMPINVOKE.new_scm_step__SWIG_1(scm_step.getCPtr(arg0)), true) {
  }

  public scm_step(scm_step arg0, scm_step arg1, double arg2) : this(SCMPINVOKE.new_scm_step__SWIG_2(scm_step.getCPtr(arg0), scm_step.getCPtr(arg1), arg2), true) {
  }

  public scm_step(scm_step arg0, scm_step arg1, scm_step arg2, scm_step arg3, double arg4) : this(SCMPINVOKE.new_scm_step__SWIG_3(scm_step.getCPtr(arg0), scm_step.getCPtr(arg1), scm_step.getCPtr(arg2), scm_step.getCPtr(arg3), arg4), true) {
  }

  public scm_step(SWIGTYPE_p_double arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2) : this(SCMPINVOKE.new_scm_step__SWIG_4(SWIGTYPE_p_double.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2)), true) {
  }

  public void draw() {
    SCMPINVOKE.scm_step_draw(swigCPtr);
  }

  public string get_name() {
    string ret = SCMPINVOKE.scm_step_get_name(swigCPtr);
    return ret;
  }

  public string get_foreground() {
    string ret = SCMPINVOKE.scm_step_get_foreground(swigCPtr);
    return ret;
  }

  public string get_background() {
    string ret = SCMPINVOKE.scm_step_get_background(swigCPtr);
    return ret;
  }

  public void get_orientation(SWIGTYPE_p_double arg0) {
    SCMPINVOKE.scm_step_get_orientation(swigCPtr, SWIGTYPE_p_double.getCPtr(arg0));
  }

  public void get_position(SWIGTYPE_p_double arg0) {
    SCMPINVOKE.scm_step_get_position(swigCPtr, SWIGTYPE_p_double.getCPtr(arg0));
  }

  public void get_light(SWIGTYPE_p_double arg0) {
    SCMPINVOKE.scm_step_get_light(swigCPtr, SWIGTYPE_p_double.getCPtr(arg0));
  }

  public double get_speed() {
    double ret = SCMPINVOKE.scm_step_get_speed(swigCPtr);
    return ret;
  }

  public double get_distance() {
    double ret = SCMPINVOKE.scm_step_get_distance(swigCPtr);
    return ret;
  }

  public double get_tension() {
    double ret = SCMPINVOKE.scm_step_get_tension(swigCPtr);
    return ret;
  }

  public double get_bias() {
    double ret = SCMPINVOKE.scm_step_get_bias(swigCPtr);
    return ret;
  }

  public double get_zoom() {
    double ret = SCMPINVOKE.scm_step_get_zoom(swigCPtr);
    return ret;
  }

  public void set_name(string s) {
    SCMPINVOKE.scm_step_set_name(swigCPtr, s);
    if (SCMPINVOKE.SWIGPendingException.Pending) throw SCMPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_foreground(string s) {
    SCMPINVOKE.scm_step_set_foreground(swigCPtr, s);
    if (SCMPINVOKE.SWIGPendingException.Pending) throw SCMPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_background(string s) {
    SCMPINVOKE.scm_step_set_background(swigCPtr, s);
    if (SCMPINVOKE.SWIGPendingException.Pending) throw SCMPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_orientation(SWIGTYPE_p_double arg0) {
    SCMPINVOKE.scm_step_set_orientation(swigCPtr, SWIGTYPE_p_double.getCPtr(arg0));
  }

  public void set_position(SWIGTYPE_p_double arg0) {
    SCMPINVOKE.scm_step_set_position(swigCPtr, SWIGTYPE_p_double.getCPtr(arg0));
  }

  public void set_light(SWIGTYPE_p_double arg0) {
    SCMPINVOKE.scm_step_set_light(swigCPtr, SWIGTYPE_p_double.getCPtr(arg0));
  }

  public void set_speed(double s) {
    SCMPINVOKE.scm_step_set_speed(swigCPtr, s);
  }

  public void set_distance(double r) {
    SCMPINVOKE.scm_step_set_distance(swigCPtr, r);
  }

  public void set_tension(double t) {
    SCMPINVOKE.scm_step_set_tension(swigCPtr, t);
  }

  public void set_bias(double b) {
    SCMPINVOKE.scm_step_set_bias(swigCPtr, b);
  }

  public void set_zoom(double z) {
    SCMPINVOKE.scm_step_set_zoom(swigCPtr, z);
  }

  public void get_matrix(SWIGTYPE_p_double arg0) {
    SCMPINVOKE.scm_step_get_matrix(swigCPtr, SWIGTYPE_p_double.getCPtr(arg0));
  }

  public void get_up(SWIGTYPE_p_double arg0) {
    SCMPINVOKE.scm_step_get_up(swigCPtr, SWIGTYPE_p_double.getCPtr(arg0));
  }

  public void get_right(SWIGTYPE_p_double arg0) {
    SCMPINVOKE.scm_step_get_right(swigCPtr, SWIGTYPE_p_double.getCPtr(arg0));
  }

  public void get_forward(SWIGTYPE_p_double arg0) {
    SCMPINVOKE.scm_step_get_forward(swigCPtr, SWIGTYPE_p_double.getCPtr(arg0));
  }

  public void set_pitch(double arg0) {
    SCMPINVOKE.scm_step_set_pitch(swigCPtr, arg0);
  }

  public void set_matrix(SWIGTYPE_p_double arg0) {
    SCMPINVOKE.scm_step_set_matrix(swigCPtr, SWIGTYPE_p_double.getCPtr(arg0));
  }

  public void transform_orientation(SWIGTYPE_p_double arg0) {
    SCMPINVOKE.scm_step_transform_orientation(swigCPtr, SWIGTYPE_p_double.getCPtr(arg0));
  }

  public void transform_position(SWIGTYPE_p_double arg0) {
    SCMPINVOKE.scm_step_transform_position(swigCPtr, SWIGTYPE_p_double.getCPtr(arg0));
  }

  public void transform_light(SWIGTYPE_p_double arg0) {
    SCMPINVOKE.scm_step_transform_light(swigCPtr, SWIGTYPE_p_double.getCPtr(arg0));
  }

}
