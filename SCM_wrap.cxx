/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_SCM(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_SCM(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_SCM(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


  #include "scm-cache.hpp"
  #include "scm-fifo.hpp"
  #include "scm-file.hpp"
  #include "scm-frame.hpp"
  #include "scm-guard.hpp"
  #include "scm-image.hpp"
  #include "scm-index.hpp"
  #include "scm-item.hpp"
  #include "scm-label.hpp"
  #include "scm-log.hpp"
  #include "scm-path.hpp"
  #include "scm-queue.hpp"
  #include "scm-render.hpp"
  #include "scm-sample.hpp"
  #include "scm-scene.hpp"
  #include "scm-set.hpp"
  #include "scm-sphere.hpp"
  #include "scm-step.hpp"
  #include "scm-system.hpp"
  #include "scm-task.hpp"
  #include "scm-transfb.hpp"
  #include "util3d/cube.h"
  #include "util3d/demo.h"
  #include "util3d/glsl.hpp"
  #include "util3d/image.h"
  #include "util3d/math3d.h"
  #include "util3d/noise.h"
  #include "util3d/obj-sphere.h"
  #include "util3d/obj.h"
  #include "util3d/plane.h"
  #include "util3d/systime.h"
  #include "util3d/type.h"
  #include "util3d/read-tiff-results.h"


#include <string>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_new_scm_cache(void * jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  scm_system *arg1 = (scm_system *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  scm_cache *result = 0 ;
  
  arg1 = (scm_system *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (scm_cache *)new scm_cache(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_scm_cache(void * jarg1) {
  scm_cache *arg1 = (scm_cache *) 0 ;
  
  arg1 = (scm_cache *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_cache_add_load(void * jarg1, void * jarg2) {
  scm_cache *arg1 = (scm_cache *) 0 ;
  scm_task *arg2 = 0 ;
  
  arg1 = (scm_cache *)jarg1; 
  arg2 = (scm_task *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "scm_task & type is null", 0);
    return ;
  } 
  (arg1)->add_load(*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_scm_cache_get_page(void * jarg1, int jarg2, long long jarg3, int jarg4, void * jarg5) {
  int jresult ;
  scm_cache *arg1 = (scm_cache *) 0 ;
  int arg2 ;
  long long arg3 ;
  int arg4 ;
  int *arg5 = 0 ;
  int result;
  
  arg1 = (scm_cache *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (long long)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->get_page(arg2,arg3,arg4,*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_scm_cache_get_texture(void * jarg1) {
  unsigned int jresult ;
  scm_cache *arg1 = (scm_cache *) 0 ;
  GLuint result;
  
  arg1 = (scm_cache *)jarg1; 
  result = (GLuint)((scm_cache const *)arg1)->get_texture();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_scm_cache_get_grid_size(void * jarg1) {
  int jresult ;
  scm_cache *arg1 = (scm_cache *) 0 ;
  int result;
  
  arg1 = (scm_cache *)jarg1; 
  result = (int)((scm_cache const *)arg1)->get_grid_size();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_scm_cache_get_page_size(void * jarg1) {
  int jresult ;
  scm_cache *arg1 = (scm_cache *) 0 ;
  int result;
  
  arg1 = (scm_cache *)jarg1; 
  result = (int)((scm_cache const *)arg1)->get_page_size();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_cache_update(void * jarg1, int jarg2, unsigned int jarg3) {
  scm_cache *arg1 = (scm_cache *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (scm_cache *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->update(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_cache_render(void * jarg1, int jarg2, int jarg3) {
  scm_cache *arg1 = (scm_cache *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (scm_cache *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->render(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_cache_flush(void * jarg1) {
  scm_cache *arg1 = (scm_cache *) 0 ;
  
  arg1 = (scm_cache *)jarg1; 
  (arg1)->flush();
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_cache_cache_size_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  scm_cache::cache_size = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_scm_cache_cache_size_get() {
  int jresult ;
  int result;
  
  result = (int)scm_cache::cache_size;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_cache_cache_threads_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  scm_cache::cache_threads = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_scm_cache_cache_threads_get() {
  int jresult ;
  int result;
  
  result = (int)scm_cache::cache_threads;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_cache_need_queue_size_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  scm_cache::need_queue_size = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_scm_cache_need_queue_size_get() {
  int jresult ;
  int result;
  
  result = (int)scm_cache::need_queue_size;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_cache_load_queue_size_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  scm_cache::load_queue_size = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_scm_cache_load_queue_size_get() {
  int jresult ;
  int result;
  
  result = (int)scm_cache::load_queue_size;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_cache_loads_per_cycle_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  scm_cache::loads_per_cycle = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_scm_cache_loads_per_cycle_get() {
  int jresult ;
  int result;
  
  result = (int)scm_cache::loads_per_cycle;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_scm_file(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  scm_file *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (scm_file *)new scm_file((std::string const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_scm_file(void * jarg1) {
  scm_file *arg1 = (scm_file *) 0 ;
  
  arg1 = (scm_file *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_file_activate(void * jarg1, void * jarg2) {
  scm_file *arg1 = (scm_file *) 0 ;
  scm_cache *arg2 = (scm_cache *) 0 ;
  
  arg1 = (scm_file *)jarg1; 
  arg2 = (scm_cache *)jarg2; 
  (arg1)->activate(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_file_deactivate(void * jarg1) {
  scm_file *arg1 = (scm_file *) 0 ;
  
  arg1 = (scm_file *)jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_scm_file_is_active(void * jarg1) {
  unsigned int jresult ;
  scm_file *arg1 = (scm_file *) 0 ;
  bool result;
  
  arg1 = (scm_file *)jarg1; 
  result = (bool)((scm_file const *)arg1)->is_active();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_scm_file_add_need(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  scm_file *arg1 = (scm_file *) 0 ;
  scm_task *arg2 = 0 ;
  bool result;
  
  arg1 = (scm_file *)jarg1; 
  arg2 = (scm_task *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "scm_task & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->add_need(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_scm_file_get_page_status(void * jarg1, unsigned long long jarg2) {
  unsigned int jresult ;
  scm_file *arg1 = (scm_file *) 0 ;
  uint64 arg2 ;
  bool result;
  
  arg1 = (scm_file *)jarg1; 
  arg2 = (uint64)jarg2; 
  result = (bool)((scm_file const *)arg1)->get_page_status(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_scm_file_get_page_offset(void * jarg1, unsigned long long jarg2) {
  unsigned long long jresult ;
  scm_file *arg1 = (scm_file *) 0 ;
  uint64 arg2 ;
  uint64 result;
  
  arg1 = (scm_file *)jarg1; 
  arg2 = (uint64)jarg2; 
  result = (uint64)((scm_file const *)arg1)->get_page_offset(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_file_get_page_bounds(void * jarg1, unsigned long long jarg2, void * jarg3, void * jarg4) {
  scm_file *arg1 = (scm_file *) 0 ;
  uint64 arg2 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  
  arg1 = (scm_file *)jarg1; 
  arg2 = (uint64)jarg2; 
  arg3 = (float *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
    return ;
  } 
  arg4 = (float *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
    return ;
  } 
  ((scm_file const *)arg1)->get_page_bounds(arg2,*arg3,*arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_scm_file_get_page_sample(void * jarg1, void * jarg2) {
  float jresult ;
  scm_file *arg1 = (scm_file *) 0 ;
  double *arg2 = (double *) 0 ;
  float result;
  
  arg1 = (scm_file *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (float)(arg1)->get_page_sample((double const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_scm_file_get_page_sample4v(void * jarg1, void * jarg2) {
  void * jresult ;
  scm_file *arg1 = (scm_file *) 0 ;
  double *arg2 = (double *) 0 ;
  float *result = 0 ;
  
  arg1 = (scm_file *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (float *)(arg1)->get_page_sample4v((double const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_scm_file_get_w(void * jarg1) {
  unsigned int jresult ;
  scm_file *arg1 = (scm_file *) 0 ;
  uint32 result;
  
  arg1 = (scm_file *)jarg1; 
  result = (uint32)((scm_file const *)arg1)->get_w();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_scm_file_get_h(void * jarg1) {
  unsigned int jresult ;
  scm_file *arg1 = (scm_file *) 0 ;
  uint32 result;
  
  arg1 = (scm_file *)jarg1; 
  result = (uint32)((scm_file const *)arg1)->get_h();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_scm_file_get_c(void * jarg1) {
  unsigned short jresult ;
  scm_file *arg1 = (scm_file *) 0 ;
  uint16 result;
  
  arg1 = (scm_file *)jarg1; 
  result = (uint16)((scm_file const *)arg1)->get_c();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_scm_file_get_b(void * jarg1) {
  unsigned short jresult ;
  scm_file *arg1 = (scm_file *) 0 ;
  uint16 result;
  
  arg1 = (scm_file *)jarg1; 
  result = (uint16)((scm_file const *)arg1)->get_b();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_scm_file_get_path(void * jarg1) {
  char * jresult ;
  scm_file *arg1 = (scm_file *) 0 ;
  char *result = 0 ;
  
  arg1 = (scm_file *)jarg1; 
  result = (char *)((scm_file const *)arg1)->get_path();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_scm_file_get_name(void * jarg1) {
  char * jresult ;
  scm_file *arg1 = (scm_file *) 0 ;
  char *result = 0 ;
  
  arg1 = (scm_file *)jarg1; 
  result = (char *)((scm_file const *)arg1)->get_name();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_scm_file_find_page(void * jarg1, long long jarg2, void * jarg3, void * jarg4) {
  unsigned long long jresult ;
  scm_file *arg1 = (scm_file *) 0 ;
  long long arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  uint64 result;
  
  arg1 = (scm_file *)jarg1; 
  arg2 = (long long)jarg2; 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return 0;
  } 
  arg4 = (double *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return 0;
  } 
  result = (uint64)((scm_file const *)arg1)->find_page(arg2,*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_loader(void * jarg1) {
  int jresult ;
  void *arg1 = (void *) 0 ;
  int result;
  
  arg1 = (void *)jarg1; 
  result = (int)loader(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_scm_load_page(char * jarg1, long long jarg2, void * jarg3, unsigned long long jarg4, int jarg5, int jarg6, int jarg7, int jarg8, void * jarg9) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  long long arg2 ;
  TIFF *arg3 = (TIFF *) 0 ;
  uint64 arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  void *arg9 = (void *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (long long)jarg2; 
  arg3 = (TIFF *)jarg3; 
  arg4 = (uint64)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (void *)jarg9; 
  result = (bool)scm_load_page((char const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_toggle_show_indices() {
  toggle_show_indices();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_scm_frame(int jarg1, int jarg2) {
  void * jresult ;
  GLsizei arg1 ;
  GLsizei arg2 ;
  scm_frame *result = 0 ;
  
  arg1 = (GLsizei)jarg1; 
  arg2 = (GLsizei)jarg2; 
  result = (scm_frame *)new scm_frame(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_scm_frame(void * jarg1) {
  scm_frame *arg1 = (scm_frame *) 0 ;
  
  arg1 = (scm_frame *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_frame_bind_frame(void * jarg1) {
  scm_frame *arg1 = (scm_frame *) 0 ;
  
  arg1 = (scm_frame *)jarg1; 
  ((scm_frame const *)arg1)->bind_frame();
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_frame_bind_color(void * jarg1) {
  scm_frame *arg1 = (scm_frame *) 0 ;
  
  arg1 = (scm_frame *)jarg1; 
  ((scm_frame const *)arg1)->bind_color();
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_frame_bind_depth(void * jarg1) {
  scm_frame *arg1 = (scm_frame *) 0 ;
  
  arg1 = (scm_frame *)jarg1; 
  ((scm_frame const *)arg1)->bind_depth();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_scm_image_get_scm(void * jarg1) {
  char * jresult ;
  scm_image *arg1 = (scm_image *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (scm_image *)jarg1; 
  result = (std::string *) &((scm_image const *)arg1)->get_scm();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_scm_image_get_name(void * jarg1) {
  char * jresult ;
  scm_image *arg1 = (scm_image *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (scm_image *)jarg1; 
  result = (std::string *) &((scm_image const *)arg1)->get_name();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_scm_image_get_channel(void * jarg1) {
  int jresult ;
  scm_image *arg1 = (scm_image *) 0 ;
  int result;
  
  arg1 = (scm_image *)jarg1; 
  result = (int)((scm_image const *)arg1)->get_channel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_scm_image_get_normal_min(void * jarg1) {
  float jresult ;
  scm_image *arg1 = (scm_image *) 0 ;
  float result;
  
  arg1 = (scm_image *)jarg1; 
  result = (float)((scm_image const *)arg1)->get_normal_min();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_scm_image_get_normal_max(void * jarg1) {
  float jresult ;
  scm_image *arg1 = (scm_image *) 0 ;
  float result;
  
  arg1 = (scm_image *)jarg1; 
  result = (float)((scm_image const *)arg1)->get_normal_max();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_image_set_scm(void * jarg1, char * jarg2) {
  scm_image *arg1 = (scm_image *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (scm_image *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->set_scm((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_image_set_name(void * jarg1, char * jarg2) {
  scm_image *arg1 = (scm_image *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (scm_image *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->set_name((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_image_set_channel(void * jarg1, int jarg2) {
  scm_image *arg1 = (scm_image *) 0 ;
  int arg2 ;
  
  arg1 = (scm_image *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->set_channel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_image_set_normal_min(void * jarg1, float jarg2) {
  scm_image *arg1 = (scm_image *) 0 ;
  float arg2 ;
  
  arg1 = (scm_image *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->set_normal_min(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_image_set_normal_max(void * jarg1, float jarg2) {
  scm_image *arg1 = (scm_image *) 0 ;
  float arg2 ;
  
  arg1 = (scm_image *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->set_normal_max(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_scm_image_is_channel(void * jarg1, int jarg2) {
  unsigned int jresult ;
  scm_image *arg1 = (scm_image *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (scm_image *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((scm_image const *)arg1)->is_channel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_scm_image_is_height(void * jarg1) {
  unsigned int jresult ;
  scm_image *arg1 = (scm_image *) 0 ;
  bool result;
  
  arg1 = (scm_image *)jarg1; 
  result = (bool)((scm_image const *)arg1)->is_height();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_scm_image(void * jarg1) {
  void * jresult ;
  scm_system *arg1 = (scm_system *) 0 ;
  scm_image *result = 0 ;
  
  arg1 = (scm_system *)jarg1; 
  result = (scm_image *)new scm_image(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_scm_image(void * jarg1) {
  scm_image *arg1 = (scm_image *) 0 ;
  
  arg1 = (scm_image *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_image_init_uniforms(void * jarg1, unsigned int jarg2) {
  scm_image *arg1 = (scm_image *) 0 ;
  GLuint arg2 ;
  
  arg1 = (scm_image *)jarg1; 
  arg2 = (GLuint)jarg2; 
  (arg1)->init_uniforms(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_image_bind(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  scm_image *arg1 = (scm_image *) 0 ;
  GLuint arg2 ;
  GLuint arg3 ;
  
  arg1 = (scm_image *)jarg1; 
  arg2 = (GLuint)jarg2; 
  arg3 = (GLuint)jarg3; 
  ((scm_image const *)arg1)->bind(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_image_unbind(void * jarg1, unsigned int jarg2) {
  scm_image *arg1 = (scm_image *) 0 ;
  GLuint arg2 ;
  
  arg1 = (scm_image *)jarg1; 
  arg2 = (GLuint)jarg2; 
  ((scm_image const *)arg1)->unbind(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_image_bind_page(void * jarg1, unsigned int jarg2, int jarg3, int jarg4, long long jarg5) {
  scm_image *arg1 = (scm_image *) 0 ;
  GLuint arg2 ;
  int arg3 ;
  int arg4 ;
  long long arg5 ;
  
  arg1 = (scm_image *)jarg1; 
  arg2 = (GLuint)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (long long)jarg5; 
  ((scm_image const *)arg1)->bind_page(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_image_unbind_page(void * jarg1, unsigned int jarg2, int jarg3) {
  scm_image *arg1 = (scm_image *) 0 ;
  GLuint arg2 ;
  int arg3 ;
  
  arg1 = (scm_image *)jarg1; 
  arg2 = (GLuint)jarg2; 
  arg3 = (int)jarg3; 
  ((scm_image const *)arg1)->unbind_page(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_image_touch_page(void * jarg1, int jarg2, long long jarg3) {
  scm_image *arg1 = (scm_image *) 0 ;
  int arg2 ;
  long long arg3 ;
  
  arg1 = (scm_image *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (long long)jarg3; 
  ((scm_image const *)arg1)->touch_page(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_scm_image_get_page_sample(void * jarg1, double* jarg2) {
  float jresult ;
  scm_image *arg1 = (scm_image *) 0 ;
  double *arg2 = (double *) 0 ;
  float result;
  
  arg1 = (scm_image *)jarg1; 
  arg2 = jarg2;
  result = (float)((scm_image const *)arg1)->get_page_sample((double const *)arg2);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_scm_image_get_page_sample4v(void * jarg1, double* jarg2) {
  void * jresult ;
  scm_image *arg1 = (scm_image *) 0 ;
  double *arg2 = (double *) 0 ;
  float *result = 0 ;
  
  arg1 = (scm_image *)jarg1; 
  arg2 = jarg2;
  result = (float *)((scm_image const *)arg1)->get_page_sample4v((double const *)arg2);
  jresult = (void *)result; 
  
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_image_get_page_bounds(void * jarg1, long long jarg2, void * jarg3, void * jarg4) {
  scm_image *arg1 = (scm_image *) 0 ;
  long long arg2 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  
  arg1 = (scm_image *)jarg1; 
  arg2 = (long long)jarg2; 
  arg3 = (float *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
    return ;
  } 
  arg4 = (float *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
    return ;
  } 
  ((scm_image const *)arg1)->get_page_bounds(arg2,*arg3,*arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_scm_image_get_page_status(void * jarg1, long long jarg2) {
  unsigned int jresult ;
  scm_image *arg1 = (scm_image *) 0 ;
  long long arg2 ;
  bool result;
  
  arg1 = (scm_image *)jarg1; 
  arg2 = (long long)jarg2; 
  result = (bool)((scm_image const *)arg1)->get_page_status(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_log2(long long jarg1) {
  long long jresult ;
  long long arg1 ;
  long long result;
  
  arg1 = (long long)jarg1; 
  result = (long long)log2(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_scm_page_count(long long jarg1) {
  long long jresult ;
  long long arg1 ;
  long long result;
  
  arg1 = (long long)jarg1; 
  result = (long long)scm_page_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_scm_page_level(long long jarg1) {
  long long jresult ;
  long long arg1 ;
  long long result;
  
  arg1 = (long long)jarg1; 
  result = (long long)scm_page_level(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_scm_page_root(long long jarg1) {
  long long jresult ;
  long long arg1 ;
  long long result;
  
  arg1 = (long long)jarg1; 
  result = (long long)scm_page_root(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_scm_page_tile(long long jarg1) {
  long long jresult ;
  long long arg1 ;
  long long result;
  
  arg1 = (long long)jarg1; 
  result = (long long)scm_page_tile(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_scm_page_row(long long jarg1) {
  long long jresult ;
  long long arg1 ;
  long long result;
  
  arg1 = (long long)jarg1; 
  result = (long long)scm_page_row(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_scm_page_col(long long jarg1) {
  long long jresult ;
  long long arg1 ;
  long long result;
  
  arg1 = (long long)jarg1; 
  result = (long long)scm_page_col(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_scm_page_index(long long jarg1, long long jarg2, long long jarg3, long long jarg4) {
  long long jresult ;
  long long arg1 ;
  long long arg2 ;
  long long arg3 ;
  long long arg4 ;
  long long result;
  
  arg1 = (long long)jarg1; 
  arg2 = (long long)jarg2; 
  arg3 = (long long)jarg3; 
  arg4 = (long long)jarg4; 
  result = (long long)scm_page_index(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_scm_page_parent(long long jarg1) {
  long long jresult ;
  long long arg1 ;
  long long result;
  
  arg1 = (long long)jarg1; 
  result = (long long)scm_page_parent(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_scm_page_child(long long jarg1, long long jarg2) {
  long long jresult ;
  long long arg1 ;
  long long arg2 ;
  long long result;
  
  arg1 = (long long)jarg1; 
  arg2 = (long long)jarg2; 
  result = (long long)scm_page_child(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_scm_page_order(long long jarg1) {
  long long jresult ;
  long long arg1 ;
  long long result;
  
  arg1 = (long long)jarg1; 
  result = (long long)scm_page_order(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_locate(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  long long *arg1 = (long long *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  arg1 = (long long *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (double *)jarg3; 
  arg4 = (double *)jarg4; 
  scm_locate(arg1,arg2,arg3,(double const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_vector(long long jarg1, double jarg2, double jarg3, void * jarg4) {
  long long arg1 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  
  arg1 = (long long)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double *)jarg4; 
  scm_vector(arg1,arg2,arg3,arg4);
}


SWIGEXPORT long long SWIGSTDCALL CSharp_scm_page_north(long long jarg1) {
  long long jresult ;
  long long arg1 ;
  long long result;
  
  arg1 = (long long)jarg1; 
  result = (long long)scm_page_north(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_scm_page_south(long long jarg1) {
  long long jresult ;
  long long arg1 ;
  long long result;
  
  arg1 = (long long)jarg1; 
  result = (long long)scm_page_south(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_scm_page_west(long long jarg1) {
  long long jresult ;
  long long arg1 ;
  long long result;
  
  arg1 = (long long)jarg1; 
  result = (long long)scm_page_west(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_scm_page_east(long long jarg1) {
  long long jresult ;
  long long arg1 ;
  long long result;
  
  arg1 = (long long)jarg1; 
  result = (long long)scm_page_east(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_page_corners(long long jarg1, void * jarg2) {
  long long arg1 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (long long)jarg1; 
  arg2 = (double *)jarg2; 
  scm_page_corners(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_page_center(long long jarg1, void * jarg2) {
  long long arg1 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (long long)jarg1; 
  arg2 = (double *)jarg2; 
  scm_page_center(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_page_grid_nv_set(void * jarg1, int jarg2) {
  _page_grid *arg1 = (_page_grid *) 0 ;
  int arg2 ;
  
  arg1 = (_page_grid *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nv = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_page_grid_nv_get(void * jarg1) {
  int jresult ;
  _page_grid *arg1 = (_page_grid *) 0 ;
  int result;
  
  arg1 = (_page_grid *)jarg1; 
  result = (int) ((arg1)->nv);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_page_grid_norms_set(void * jarg1, void * jarg2) {
  _page_grid *arg1 = (_page_grid *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (_page_grid *)jarg1; 
  arg2 = (double *)jarg2; 
  if (arg1) (arg1)->norms = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_page_grid_norms_get(void * jarg1) {
  void * jresult ;
  _page_grid *arg1 = (_page_grid *) 0 ;
  double *result = 0 ;
  
  arg1 = (_page_grid *)jarg1; 
  result = (double *) ((arg1)->norms);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_page_grid_patchIds_set(void * jarg1, void * jarg2) {
  _page_grid *arg1 = (_page_grid *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (_page_grid *)jarg1; 
  arg2 = (int *)jarg2; 
  if (arg1) (arg1)->patchIds = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_page_grid_patchIds_get(void * jarg1) {
  void * jresult ;
  _page_grid *arg1 = (_page_grid *) 0 ;
  int *result = 0 ;
  
  arg1 = (_page_grid *)jarg1; 
  result = (int *) ((arg1)->patchIds);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_page_grid() {
  void * jresult ;
  _page_grid *result = 0 ;
  
  result = (_page_grid *)new _page_grid();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_page_grid(void * jarg1) {
  _page_grid *arg1 = (_page_grid *) 0 ;
  
  arg1 = (_page_grid *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_scm_page_get_grid(long long jarg1, int jarg2) {
  void * jresult ;
  long long arg1 ;
  int arg2 ;
  page_grid result;
  
  arg1 = (long long)jarg1; 
  arg2 = (int)jarg2; 
  result = scm_page_get_grid(arg1,arg2);
  jresult = new page_grid((const page_grid &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_scm_page_get_center(long long jarg1) {
  void * jresult ;
  long long arg1 ;
  double *result = 0 ;
  
  arg1 = (long long)jarg1; 
  result = (double *)scm_page_get_center(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_scm_item__SWIG_0() {
  void * jresult ;
  scm_item *result = 0 ;
  
  result = (scm_item *)new scm_item();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_scm_item__SWIG_1(int jarg1, long long jarg2) {
  void * jresult ;
  int arg1 ;
  long long arg2 ;
  scm_item *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (long long)jarg2; 
  result = (scm_item *)new scm_item(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_item_f_set(void * jarg1, int jarg2) {
  scm_item *arg1 = (scm_item *) 0 ;
  int arg2 ;
  
  arg1 = (scm_item *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->f = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_scm_item_f_get(void * jarg1) {
  int jresult ;
  scm_item *arg1 = (scm_item *) 0 ;
  int result;
  
  arg1 = (scm_item *)jarg1; 
  result = (int) ((arg1)->f);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_item_i_set(void * jarg1, long long jarg2) {
  scm_item *arg1 = (scm_item *) 0 ;
  long long arg2 ;
  
  arg1 = (scm_item *)jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->i = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_scm_item_i_get(void * jarg1) {
  long long jresult ;
  scm_item *arg1 = (scm_item *) 0 ;
  long long result;
  
  arg1 = (scm_item *)jarg1; 
  result = (long long) ((arg1)->i);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_scm_item_is_valid(void * jarg1) {
  unsigned int jresult ;
  scm_item *arg1 = (scm_item *) 0 ;
  bool result;
  
  arg1 = (scm_item *)jarg1; 
  result = (bool)((scm_item const *)arg1)->is_valid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_scm_item(void * jarg1) {
  scm_item *arg1 = (scm_item *) 0 ;
  
  arg1 = (scm_item *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_scm_label(char * jarg1, int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  int arg2 ;
  scm_label *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (int)jarg2; 
  result = (scm_label *)new scm_label((std::string const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_scm_label(void * jarg1) {
  scm_label *arg1 = (scm_label *) 0 ;
  
  arg1 = (scm_label *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_label_draw(void * jarg1, unsigned char jarg2, unsigned char jarg3, unsigned char jarg4, unsigned char jarg5) {
  scm_label *arg1 = (scm_label *) 0 ;
  GLubyte arg2 ;
  GLubyte arg3 ;
  GLubyte arg4 ;
  GLubyte arg5 ;
  
  arg1 = (scm_label *)jarg1; 
  arg2 = (GLubyte)jarg2; 
  arg3 = (GLubyte)jarg3; 
  arg4 = (GLubyte)jarg4; 
  arg5 = (GLubyte)jarg5; 
  (arg1)->draw(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_logopen(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  scm_logopen((char const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_log(char * jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  arg1 = (char *)jarg1; 
  scm_log((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_clog(char * jarg1, char * jarg2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  scm_clog((char const *)arg1,(char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_clognoflush(char * jarg1, char * jarg2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  scm_clognoflush((char const *)arg1,(char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_logflush() {
  scm_logflush();
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_logclose() {
  scm_logclose();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_scm_path_search(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = scm_path_search((std::string const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_scm_render(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  scm_render *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (scm_render *)new scm_render(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_scm_render(void * jarg1) {
  scm_render *arg1 = (scm_render *) 0 ;
  
  arg1 = (scm_render *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_render_render__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, int jarg7, int jarg8) {
  scm_render *arg1 = (scm_render *) 0 ;
  scm_sphere *arg2 = (scm_sphere *) 0 ;
  scm_scene *arg3 = (scm_scene *) 0 ;
  scm_scene *arg4 = (scm_scene *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  int arg7 ;
  int arg8 ;
  
  arg1 = (scm_render *)jarg1; 
  arg2 = (scm_sphere *)jarg2; 
  arg3 = (scm_scene *)jarg3; 
  arg4 = (scm_scene *)jarg4; 
  arg5 = (double *)jarg5; 
  arg6 = (double *)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  (arg1)->render(arg2,arg3,arg4,(double const *)arg5,(double const *)arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_render_render__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, int jarg9, int jarg10, double jarg11) {
  scm_render *arg1 = (scm_render *) 0 ;
  scm_sphere *arg2 = (scm_sphere *) 0 ;
  scm_scene *arg3 = (scm_scene *) 0 ;
  scm_scene *arg4 = (scm_scene *) 0 ;
  scm_scene *arg5 = (scm_scene *) 0 ;
  scm_scene *arg6 = (scm_scene *) 0 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  int arg9 ;
  int arg10 ;
  double arg11 ;
  
  arg1 = (scm_render *)jarg1; 
  arg2 = (scm_sphere *)jarg2; 
  arg3 = (scm_scene *)jarg3; 
  arg4 = (scm_scene *)jarg4; 
  arg5 = (scm_scene *)jarg5; 
  arg6 = (scm_scene *)jarg6; 
  arg7 = (double *)jarg7; 
  arg8 = (double *)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = (int)jarg10; 
  arg11 = (double)jarg11; 
  (arg1)->render(arg2,arg3,arg4,arg5,arg6,(double const *)arg7,(double const *)arg8,arg9,arg10,arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_render_set_size(void * jarg1, int jarg2, int jarg3) {
  scm_render *arg1 = (scm_render *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (scm_render *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->set_size(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_render_set_blur(void * jarg1, int jarg2) {
  scm_render *arg1 = (scm_render *) 0 ;
  int arg2 ;
  
  arg1 = (scm_render *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->set_blur(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_render_set_wire(void * jarg1, unsigned int jarg2) {
  scm_render *arg1 = (scm_render *) 0 ;
  bool arg2 ;
  
  arg1 = (scm_render *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_wire(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_scm_render_get_blur(void * jarg1) {
  int jresult ;
  scm_render *arg1 = (scm_render *) 0 ;
  int result;
  
  arg1 = (scm_render *)jarg1; 
  result = (int)((scm_render const *)arg1)->get_blur();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_scm_render_get_wire(void * jarg1) {
  unsigned int jresult ;
  scm_render *arg1 = (scm_render *) 0 ;
  bool result;
  
  arg1 = (scm_render *)jarg1; 
  result = (bool)((scm_render const *)arg1)->get_wire();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_scm_sample(void * jarg1) {
  void * jresult ;
  scm_file *arg1 = (scm_file *) 0 ;
  scm_sample *result = 0 ;
  
  arg1 = (scm_file *)jarg1; 
  result = (scm_sample *)new scm_sample(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_scm_sample(void * jarg1) {
  scm_sample *arg1 = (scm_sample *) 0 ;
  
  arg1 = (scm_sample *)jarg1; 
  delete arg1;
}


SWIGEXPORT float SWIGSTDCALL CSharp_scm_sample_get(void * jarg1, void * jarg2) {
  float jresult ;
  scm_sample *arg1 = (scm_sample *) 0 ;
  double *arg2 = (double *) 0 ;
  float result;
  
  arg1 = (scm_sample *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (float)(arg1)->get((double const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_scm_sample_get4v(void * jarg1, void * jarg2) {
  void * jresult ;
  scm_sample *arg1 = (scm_sample *) 0 ;
  double *arg2 = (double *) 0 ;
  float *result = 0 ;
  
  arg1 = (scm_sample *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (float *)(arg1)->get4v((double const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_scm_scene(void * jarg1) {
  void * jresult ;
  scm_system *arg1 = (scm_system *) 0 ;
  scm_scene *result = 0 ;
  
  arg1 = (scm_system *)jarg1; 
  result = (scm_scene *)new scm_scene(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_scm_scene(void * jarg1) {
  scm_scene *arg1 = (scm_scene *) 0 ;
  
  arg1 = (scm_scene *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_scm_scene_get_color(void * jarg1) {
  unsigned int jresult ;
  scm_scene *arg1 = (scm_scene *) 0 ;
  GLuint result;
  
  arg1 = (scm_scene *)jarg1; 
  result = (GLuint)((scm_scene const *)arg1)->get_color();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_scm_scene_get_name(void * jarg1) {
  char * jresult ;
  scm_scene *arg1 = (scm_scene *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (scm_scene *)jarg1; 
  result = (std::string *) &((scm_scene const *)arg1)->get_name();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_scm_scene_get_label(void * jarg1) {
  char * jresult ;
  scm_scene *arg1 = (scm_scene *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (scm_scene *)jarg1; 
  result = (std::string *) &((scm_scene const *)arg1)->get_label();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_scm_scene_get_vert(void * jarg1) {
  char * jresult ;
  scm_scene *arg1 = (scm_scene *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (scm_scene *)jarg1; 
  result = (std::string *) &((scm_scene const *)arg1)->get_vert();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_scm_scene_get_frag(void * jarg1) {
  char * jresult ;
  scm_scene *arg1 = (scm_scene *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (scm_scene *)jarg1; 
  result = (std::string *) &((scm_scene const *)arg1)->get_frag();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_scene_set_color(void * jarg1, unsigned int jarg2) {
  scm_scene *arg1 = (scm_scene *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (scm_scene *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_color(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_scene_set_name(void * jarg1, char * jarg2) {
  scm_scene *arg1 = (scm_scene *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (scm_scene *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->set_name((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_scene_set_label(void * jarg1, char * jarg2) {
  scm_scene *arg1 = (scm_scene *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (scm_scene *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->set_label((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_scene_set_vert(void * jarg1, char * jarg2) {
  scm_scene *arg1 = (scm_scene *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (scm_scene *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->set_vert((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_scene_set_frag(void * jarg1, char * jarg2) {
  scm_scene *arg1 = (scm_scene *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (scm_scene *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->set_frag((std::string const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_scm_scene_add_image(void * jarg1, int jarg2) {
  int jresult ;
  scm_scene *arg1 = (scm_scene *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (scm_scene *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->add_image(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_scene_del_image(void * jarg1, int jarg2) {
  scm_scene *arg1 = (scm_scene *) 0 ;
  int arg2 ;
  
  arg1 = (scm_scene *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->del_image(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_scm_scene_get_image(void * jarg1, int jarg2) {
  void * jresult ;
  scm_scene *arg1 = (scm_scene *) 0 ;
  int arg2 ;
  scm_image *result = 0 ;
  
  arg1 = (scm_scene *)jarg1; 
  arg2 = (int)jarg2; 
  result = (scm_image *)(arg1)->get_image(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_scm_scene_get_image_count(void * jarg1) {
  int jresult ;
  scm_scene *arg1 = (scm_scene *) 0 ;
  int result;
  
  arg1 = (scm_scene *)jarg1; 
  result = (int)((scm_scene const *)arg1)->get_image_count();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_scene_init_uniforms(void * jarg1) {
  scm_scene *arg1 = (scm_scene *) 0 ;
  
  arg1 = (scm_scene *)jarg1; 
  (arg1)->init_uniforms();
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_scene_draw_label(void * jarg1) {
  scm_scene *arg1 = (scm_scene *) 0 ;
  
  arg1 = (scm_scene *)jarg1; 
  (arg1)->draw_label();
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_scene_bind(void * jarg1, int jarg2) {
  scm_scene *arg1 = (scm_scene *) 0 ;
  int arg2 ;
  
  arg1 = (scm_scene *)jarg1; 
  arg2 = (int)jarg2; 
  ((scm_scene const *)arg1)->bind(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_scene_unbind(void * jarg1, int jarg2) {
  scm_scene *arg1 = (scm_scene *) 0 ;
  int arg2 ;
  
  arg1 = (scm_scene *)jarg1; 
  arg2 = (int)jarg2; 
  ((scm_scene const *)arg1)->unbind(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_scene_bind_page(void * jarg1, int jarg2, int jarg3, int jarg4, long long jarg5) {
  scm_scene *arg1 = (scm_scene *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  long long arg5 ;
  
  arg1 = (scm_scene *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (long long)jarg5; 
  ((scm_scene const *)arg1)->bind_page(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_scene_unbind_page(void * jarg1, int jarg2, int jarg3) {
  scm_scene *arg1 = (scm_scene *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (scm_scene *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  ((scm_scene const *)arg1)->unbind_page(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_scene_touch_page(void * jarg1, int jarg2, int jarg3, long long jarg4) {
  scm_scene *arg1 = (scm_scene *) 0 ;
  int arg2 ;
  int arg3 ;
  long long arg4 ;
  
  arg1 = (scm_scene *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (long long)jarg4; 
  ((scm_scene const *)arg1)->touch_page(arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_scm_scene_get_minimum_ground(void * jarg1) {
  float jresult ;
  scm_scene *arg1 = (scm_scene *) 0 ;
  float result;
  
  arg1 = (scm_scene *)jarg1; 
  result = (float)((scm_scene const *)arg1)->get_minimum_ground();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_scm_scene_get_current_ground(void * jarg1, void * jarg2) {
  float jresult ;
  scm_scene *arg1 = (scm_scene *) 0 ;
  double *arg2 = (double *) 0 ;
  float result;
  
  arg1 = (scm_scene *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (float)((scm_scene const *)arg1)->get_current_ground((double const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_scene_get_page_bounds(void * jarg1, int jarg2, long long jarg3, void * jarg4, void * jarg5) {
  scm_scene *arg1 = (scm_scene *) 0 ;
  int arg2 ;
  long long arg3 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  
  arg1 = (scm_scene *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (long long)jarg3; 
  arg4 = (float *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
    return ;
  } 
  arg5 = (float *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
    return ;
  } 
  ((scm_scene const *)arg1)->get_page_bounds(arg2,arg3,*arg4,*arg5);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_scm_scene_get_page_status(void * jarg1, int jarg2, long long jarg3) {
  unsigned int jresult ;
  scm_scene *arg1 = (scm_scene *) 0 ;
  int arg2 ;
  long long arg3 ;
  bool result;
  
  arg1 = (scm_scene *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (long long)jarg3; 
  result = (bool)((scm_scene const *)arg1)->get_page_status(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_scm_scene_get_program(void * jarg1) {
  unsigned int jresult ;
  scm_scene *arg1 = (scm_scene *) 0 ;
  unsigned int result;
  
  arg1 = (scm_scene *)jarg1; 
  result = (unsigned int)((scm_scene const *)arg1)->get_program();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_scene_uA_set(void * jarg1, void * jarg2) {
  scm_scene *arg1 = (scm_scene *) 0 ;
  GLint *arg2 ;
  
  arg1 = (scm_scene *)jarg1; 
  arg2 = (GLint *)jarg2; 
  {
    size_t ii;
    GLint *b = (GLint *) arg1->uA;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((GLint *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_scm_scene_uA_get(void * jarg1) {
  void * jresult ;
  scm_scene *arg1 = (scm_scene *) 0 ;
  GLint *result = 0 ;
  
  arg1 = (scm_scene *)jarg1; 
  result = (GLint *)(GLint *) ((arg1)->uA);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_scene_uB_set(void * jarg1, void * jarg2) {
  scm_scene *arg1 = (scm_scene *) 0 ;
  GLint *arg2 ;
  
  arg1 = (scm_scene *)jarg1; 
  arg2 = (GLint *)jarg2; 
  {
    size_t ii;
    GLint *b = (GLint *) arg1->uB;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((GLint *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_scm_scene_uB_get(void * jarg1) {
  void * jresult ;
  scm_scene *arg1 = (scm_scene *) 0 ;
  GLint *result = 0 ;
  
  arg1 = (scm_scene *)jarg1; 
  result = (GLint *)(GLint *) ((arg1)->uB);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_scene_uM_set(void * jarg1, int jarg2) {
  scm_scene *arg1 = (scm_scene *) 0 ;
  GLint arg2 ;
  
  arg1 = (scm_scene *)jarg1; 
  arg2 = (GLint)jarg2; 
  if (arg1) (arg1)->uM = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_scm_scene_uM_get(void * jarg1) {
  int jresult ;
  scm_scene *arg1 = (scm_scene *) 0 ;
  GLint result;
  
  arg1 = (scm_scene *)jarg1; 
  result = (GLint) ((arg1)->uM);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_scene_uzoomv_set(void * jarg1, int jarg2) {
  scm_scene *arg1 = (scm_scene *) 0 ;
  GLint arg2 ;
  
  arg1 = (scm_scene *)jarg1; 
  arg2 = (GLint)jarg2; 
  if (arg1) (arg1)->uzoomv = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_scm_scene_uzoomv_get(void * jarg1) {
  int jresult ;
  scm_scene *arg1 = (scm_scene *) 0 ;
  GLint result;
  
  arg1 = (scm_scene *)jarg1; 
  result = (GLint) ((arg1)->uzoomv);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_scene_uzoomk_set(void * jarg1, int jarg2) {
  scm_scene *arg1 = (scm_scene *) 0 ;
  GLint arg2 ;
  
  arg1 = (scm_scene *)jarg1; 
  arg2 = (GLint)jarg2; 
  if (arg1) (arg1)->uzoomk = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_scm_scene_uzoomk_get(void * jarg1) {
  int jresult ;
  scm_scene *arg1 = (scm_scene *) 0 ;
  GLint result;
  
  arg1 = (scm_scene *)jarg1; 
  result = (GLint) ((arg1)->uzoomk);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_scm_page__SWIG_0() {
  void * jresult ;
  scm_page *result = 0 ;
  
  result = (scm_page *)new scm_page();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_scm_page__SWIG_1(int jarg1, long long jarg2) {
  void * jresult ;
  int arg1 ;
  long long arg2 ;
  scm_page *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (long long)jarg2; 
  result = (scm_page *)new scm_page(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_scm_page__SWIG_2(int jarg1, long long jarg2, int jarg3) {
  void * jresult ;
  int arg1 ;
  long long arg2 ;
  int arg3 ;
  scm_page *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (long long)jarg2; 
  arg3 = (int)jarg3; 
  result = (scm_page *)new scm_page(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_scm_page__SWIG_3(int jarg1, long long jarg2, int jarg3, int jarg4) {
  void * jresult ;
  int arg1 ;
  long long arg2 ;
  int arg3 ;
  int arg4 ;
  scm_page *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (long long)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (scm_page *)new scm_page(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_page_l_set(void * jarg1, int jarg2) {
  scm_page *arg1 = (scm_page *) 0 ;
  int arg2 ;
  
  arg1 = (scm_page *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->l = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_scm_page_l_get(void * jarg1) {
  int jresult ;
  scm_page *arg1 = (scm_page *) 0 ;
  int result;
  
  arg1 = (scm_page *)jarg1; 
  result = (int) ((arg1)->l);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_page_t_set(void * jarg1, int jarg2) {
  scm_page *arg1 = (scm_page *) 0 ;
  int arg2 ;
  
  arg1 = (scm_page *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->t = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_scm_page_t_get(void * jarg1) {
  int jresult ;
  scm_page *arg1 = (scm_page *) 0 ;
  int result;
  
  arg1 = (scm_page *)jarg1; 
  result = (int) ((arg1)->t);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_scm_page(void * jarg1) {
  scm_page *arg1 = (scm_page *) 0 ;
  
  arg1 = (scm_page *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_scm_set_empty(void * jarg1) {
  unsigned int jresult ;
  scm_set *arg1 = (scm_set *) 0 ;
  bool result;
  
  arg1 = (scm_set *)jarg1; 
  result = (bool)((scm_set const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_scm_set_search(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  scm_set *arg1 = (scm_set *) 0 ;
  scm_page arg2 ;
  int arg3 ;
  scm_page *argp2 ;
  scm_page result;
  
  arg1 = (scm_set *)jarg1; 
  argp2 = (scm_page *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null scm_page", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  result = (arg1)->search(arg2,arg3);
  jresult = new scm_page((const scm_page &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_set_insert(void * jarg1, void * jarg2, int jarg3) {
  scm_set *arg1 = (scm_set *) 0 ;
  scm_page arg2 ;
  int arg3 ;
  scm_page *argp2 ;
  
  arg1 = (scm_set *)jarg1; 
  argp2 = (scm_page *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null scm_page", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  (arg1)->insert(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_set_remove(void * jarg1, void * jarg2) {
  scm_set *arg1 = (scm_set *) 0 ;
  scm_page arg2 ;
  scm_page *argp2 ;
  
  arg1 = (scm_set *)jarg1; 
  argp2 = (scm_page *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null scm_page", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->remove(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_scm_set_eject(void * jarg1, int jarg2, long long jarg3) {
  void * jresult ;
  scm_set *arg1 = (scm_set *) 0 ;
  int arg2 ;
  long long arg3 ;
  scm_page result;
  
  arg1 = (scm_set *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (long long)jarg3; 
  result = (arg1)->eject(arg2,arg3);
  jresult = new scm_page((const scm_page &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_scm_set() {
  void * jresult ;
  scm_set *result = 0 ;
  
  result = (scm_set *)new scm_set();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_scm_set(void * jarg1) {
  scm_set *arg1 = (scm_set *) 0 ;
  
  arg1 = (scm_set *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_scm_sphere(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  scm_sphere *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (scm_sphere *)new scm_sphere(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_scm_sphere(void * jarg1) {
  scm_sphere *arg1 = (scm_sphere *) 0 ;
  
  arg1 = (scm_sphere *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_sphere_prep(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, int jarg6, unsigned int jarg7) {
  scm_sphere *arg1 = (scm_sphere *) 0 ;
  scm_scene *arg2 = (scm_scene *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  bool arg7 ;
  
  arg1 = (scm_sphere *)jarg1; 
  arg2 = (scm_scene *)jarg2; 
  arg3 = (double *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->prep(arg2,(double const *)arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_sphere_draw(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, int jarg6, int jarg7) {
  scm_sphere *arg1 = (scm_sphere *) 0 ;
  scm_scene *arg2 = (scm_scene *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  
  arg1 = (scm_sphere *)jarg1; 
  arg2 = (scm_scene *)jarg2; 
  arg3 = (double *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  (arg1)->draw(arg2,(double const *)arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_sphere_set_detail(void * jarg1, int jarg2) {
  scm_sphere *arg1 = (scm_sphere *) 0 ;
  int arg2 ;
  
  arg1 = (scm_sphere *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->set_detail(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_sphere_set_limit(void * jarg1, int jarg2) {
  scm_sphere *arg1 = (scm_sphere *) 0 ;
  int arg2 ;
  
  arg1 = (scm_sphere *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->set_limit(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_scm_sphere_get_detail(void * jarg1) {
  int jresult ;
  scm_sphere *arg1 = (scm_sphere *) 0 ;
  int result;
  
  arg1 = (scm_sphere *)jarg1; 
  result = (int)((scm_sphere const *)arg1)->get_detail();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_scm_sphere_get_limit(void * jarg1) {
  int jresult ;
  scm_sphere *arg1 = (scm_sphere *) 0 ;
  int result;
  
  arg1 = (scm_sphere *)jarg1; 
  result = (int)((scm_sphere const *)arg1)->get_limit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_sphere_transfb_set(void * jarg1, void * jarg2) {
  scm_sphere *arg1 = (scm_sphere *) 0 ;
  scm_transfb *arg2 = (scm_transfb *) 0 ;
  
  arg1 = (scm_sphere *)jarg1; 
  arg2 = (scm_transfb *)jarg2; 
  if (arg1) (arg1)->transfb = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_scm_sphere_transfb_get(void * jarg1) {
  void * jresult ;
  scm_sphere *arg1 = (scm_sphere *) 0 ;
  scm_transfb *result = 0 ;
  
  arg1 = (scm_sphere *)jarg1; 
  result = (scm_transfb *) ((arg1)->transfb);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_sphere_capture_next_frame(void * jarg1) {
  scm_sphere *arg1 = (scm_sphere *) 0 ;
  
  arg1 = (scm_sphere *)jarg1; 
  (arg1)->capture_next_frame();
}


SWIGEXPORT int SWIGSTDCALL CSharp_scm_sphere_ready_to_capture(void * jarg1) {
  int jresult ;
  scm_sphere *arg1 = (scm_sphere *) 0 ;
  int result;
  
  arg1 = (scm_sphere *)jarg1; 
  result = (int)(arg1)->ready_to_capture();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_sphere_set_num_fb_verts(void * jarg1, unsigned long long jarg2) {
  scm_sphere *arg1 = (scm_sphere *) 0 ;
  unsigned long long arg2 ;
  
  arg1 = (scm_sphere *)jarg1; 
  arg2 = (unsigned long long)jarg2; 
  (arg1)->set_num_fb_verts(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_sphere_set_zoom(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  scm_sphere *arg1 = (scm_sphere *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  arg1 = (scm_sphere *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  (arg1)->set_zoom(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_scm_step__SWIG_0() {
  void * jresult ;
  scm_step *result = 0 ;
  
  result = (scm_step *)new scm_step();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_scm_step__SWIG_1(void * jarg1) {
  void * jresult ;
  scm_step *arg1 = (scm_step *) 0 ;
  scm_step *result = 0 ;
  
  arg1 = (scm_step *)jarg1; 
  result = (scm_step *)new scm_step((scm_step const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_scm_step__SWIG_2(void * jarg1, void * jarg2, double jarg3) {
  void * jresult ;
  scm_step *arg1 = (scm_step *) 0 ;
  scm_step *arg2 = (scm_step *) 0 ;
  double arg3 ;
  scm_step *result = 0 ;
  
  arg1 = (scm_step *)jarg1; 
  arg2 = (scm_step *)jarg2; 
  arg3 = (double)jarg3; 
  result = (scm_step *)new scm_step((scm_step const *)arg1,(scm_step const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_scm_step__SWIG_3(void * jarg1, void * jarg2, void * jarg3, void * jarg4, double jarg5) {
  void * jresult ;
  scm_step *arg1 = (scm_step *) 0 ;
  scm_step *arg2 = (scm_step *) 0 ;
  scm_step *arg3 = (scm_step *) 0 ;
  scm_step *arg4 = (scm_step *) 0 ;
  double arg5 ;
  scm_step *result = 0 ;
  
  arg1 = (scm_step *)jarg1; 
  arg2 = (scm_step *)jarg2; 
  arg3 = (scm_step *)jarg3; 
  arg4 = (scm_step *)jarg4; 
  arg5 = (double)jarg5; 
  result = (scm_step *)new scm_step((scm_step const *)arg1,(scm_step const *)arg2,(scm_step const *)arg3,(scm_step const *)arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_scm_step__SWIG_4(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  scm_step *result = 0 ;
  
  arg1 = (double *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (double *)jarg3; 
  result = (scm_step *)new scm_step((double const *)arg1,(double const *)arg2,(double const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_step_draw(void * jarg1) {
  scm_step *arg1 = (scm_step *) 0 ;
  
  arg1 = (scm_step *)jarg1; 
  (arg1)->draw();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_scm_step_get_name(void * jarg1) {
  char * jresult ;
  scm_step *arg1 = (scm_step *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (scm_step *)jarg1; 
  result = (std::string *) &((scm_step const *)arg1)->get_name();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_scm_step_get_foreground(void * jarg1) {
  char * jresult ;
  scm_step *arg1 = (scm_step *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (scm_step *)jarg1; 
  result = (std::string *) &((scm_step const *)arg1)->get_foreground();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_scm_step_get_background(void * jarg1) {
  char * jresult ;
  scm_step *arg1 = (scm_step *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (scm_step *)jarg1; 
  result = (std::string *) &((scm_step const *)arg1)->get_background();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_step_get_orientation(void * jarg1, void * jarg2) {
  scm_step *arg1 = (scm_step *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (scm_step *)jarg1; 
  arg2 = (double *)jarg2; 
  ((scm_step const *)arg1)->get_orientation(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_step_get_position(void * jarg1, void * jarg2) {
  scm_step *arg1 = (scm_step *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (scm_step *)jarg1; 
  arg2 = (double *)jarg2; 
  ((scm_step const *)arg1)->get_position(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_step_get_light(void * jarg1, void * jarg2) {
  scm_step *arg1 = (scm_step *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (scm_step *)jarg1; 
  arg2 = (double *)jarg2; 
  ((scm_step const *)arg1)->get_light(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_scm_step_get_speed(void * jarg1) {
  double jresult ;
  scm_step *arg1 = (scm_step *) 0 ;
  double result;
  
  arg1 = (scm_step *)jarg1; 
  result = (double)((scm_step const *)arg1)->get_speed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_scm_step_get_distance(void * jarg1) {
  double jresult ;
  scm_step *arg1 = (scm_step *) 0 ;
  double result;
  
  arg1 = (scm_step *)jarg1; 
  result = (double)((scm_step const *)arg1)->get_distance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_scm_step_get_tension(void * jarg1) {
  double jresult ;
  scm_step *arg1 = (scm_step *) 0 ;
  double result;
  
  arg1 = (scm_step *)jarg1; 
  result = (double)((scm_step const *)arg1)->get_tension();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_scm_step_get_bias(void * jarg1) {
  double jresult ;
  scm_step *arg1 = (scm_step *) 0 ;
  double result;
  
  arg1 = (scm_step *)jarg1; 
  result = (double)((scm_step const *)arg1)->get_bias();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_scm_step_get_zoom(void * jarg1) {
  double jresult ;
  scm_step *arg1 = (scm_step *) 0 ;
  double result;
  
  arg1 = (scm_step *)jarg1; 
  result = (double)((scm_step const *)arg1)->get_zoom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_step_set_name(void * jarg1, char * jarg2) {
  scm_step *arg1 = (scm_step *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (scm_step *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->set_name((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_step_set_foreground(void * jarg1, char * jarg2) {
  scm_step *arg1 = (scm_step *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (scm_step *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->set_foreground((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_step_set_background(void * jarg1, char * jarg2) {
  scm_step *arg1 = (scm_step *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (scm_step *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->set_background((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_step_set_orientation(void * jarg1, void * jarg2) {
  scm_step *arg1 = (scm_step *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (scm_step *)jarg1; 
  arg2 = (double *)jarg2; 
  (arg1)->set_orientation((double const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_step_set_position(void * jarg1, void * jarg2) {
  scm_step *arg1 = (scm_step *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (scm_step *)jarg1; 
  arg2 = (double *)jarg2; 
  (arg1)->set_position((double const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_step_set_light(void * jarg1, void * jarg2) {
  scm_step *arg1 = (scm_step *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (scm_step *)jarg1; 
  arg2 = (double *)jarg2; 
  (arg1)->set_light((double const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_step_set_speed(void * jarg1, double jarg2) {
  scm_step *arg1 = (scm_step *) 0 ;
  double arg2 ;
  
  arg1 = (scm_step *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_speed(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_step_set_distance(void * jarg1, double jarg2) {
  scm_step *arg1 = (scm_step *) 0 ;
  double arg2 ;
  
  arg1 = (scm_step *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_distance(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_step_set_tension(void * jarg1, double jarg2) {
  scm_step *arg1 = (scm_step *) 0 ;
  double arg2 ;
  
  arg1 = (scm_step *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_tension(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_step_set_bias(void * jarg1, double jarg2) {
  scm_step *arg1 = (scm_step *) 0 ;
  double arg2 ;
  
  arg1 = (scm_step *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_bias(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_step_set_zoom(void * jarg1, double jarg2) {
  scm_step *arg1 = (scm_step *) 0 ;
  double arg2 ;
  
  arg1 = (scm_step *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_zoom(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_step_get_matrix(void * jarg1, void * jarg2) {
  scm_step *arg1 = (scm_step *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (scm_step *)jarg1; 
  arg2 = (double *)jarg2; 
  ((scm_step const *)arg1)->get_matrix(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_step_get_up(void * jarg1, void * jarg2) {
  scm_step *arg1 = (scm_step *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (scm_step *)jarg1; 
  arg2 = (double *)jarg2; 
  ((scm_step const *)arg1)->get_up(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_step_get_right(void * jarg1, void * jarg2) {
  scm_step *arg1 = (scm_step *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (scm_step *)jarg1; 
  arg2 = (double *)jarg2; 
  ((scm_step const *)arg1)->get_right(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_step_get_forward(void * jarg1, void * jarg2) {
  scm_step *arg1 = (scm_step *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (scm_step *)jarg1; 
  arg2 = (double *)jarg2; 
  ((scm_step const *)arg1)->get_forward(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_step_set_pitch(void * jarg1, double jarg2) {
  scm_step *arg1 = (scm_step *) 0 ;
  double arg2 ;
  
  arg1 = (scm_step *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_pitch(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_step_set_matrix(void * jarg1, void * jarg2) {
  scm_step *arg1 = (scm_step *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (scm_step *)jarg1; 
  arg2 = (double *)jarg2; 
  (arg1)->set_matrix((double const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_step_transform_orientation(void * jarg1, void * jarg2) {
  scm_step *arg1 = (scm_step *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (scm_step *)jarg1; 
  arg2 = (double *)jarg2; 
  (arg1)->transform_orientation((double const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_step_transform_position(void * jarg1, void * jarg2) {
  scm_step *arg1 = (scm_step *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (scm_step *)jarg1; 
  arg2 = (double *)jarg2; 
  (arg1)->transform_position((double const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_step_transform_light(void * jarg1, void * jarg2) {
  scm_step *arg1 = (scm_step *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (scm_step *)jarg1; 
  arg2 = (double *)jarg2; 
  (arg1)->transform_light((double const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_scm_step(void * jarg1) {
  scm_step *arg1 = (scm_step *) 0 ;
  
  arg1 = (scm_step *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_active_pair__SWIG_0() {
  void * jresult ;
  active_pair *result = 0 ;
  
  result = (active_pair *)new active_pair();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_active_pair__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  scm_file *arg1 = (scm_file *) 0 ;
  scm_cache *arg2 = (scm_cache *) 0 ;
  active_pair *result = 0 ;
  
  arg1 = (scm_file *)jarg1; 
  arg2 = (scm_cache *)jarg2; 
  result = (active_pair *)new active_pair(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_active_pair_file_set(void * jarg1, void * jarg2) {
  active_pair *arg1 = (active_pair *) 0 ;
  scm_file *arg2 = (scm_file *) 0 ;
  
  arg1 = (active_pair *)jarg1; 
  arg2 = (scm_file *)jarg2; 
  if (arg1) (arg1)->file = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_active_pair_file_get(void * jarg1) {
  void * jresult ;
  active_pair *arg1 = (active_pair *) 0 ;
  scm_file *result = 0 ;
  
  arg1 = (active_pair *)jarg1; 
  result = (scm_file *) ((arg1)->file);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_active_pair_cache_set(void * jarg1, void * jarg2) {
  active_pair *arg1 = (active_pair *) 0 ;
  scm_cache *arg2 = (scm_cache *) 0 ;
  
  arg1 = (active_pair *)jarg1; 
  arg2 = (scm_cache *)jarg2; 
  if (arg1) (arg1)->cache = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_active_pair_cache_get(void * jarg1) {
  void * jresult ;
  active_pair *arg1 = (active_pair *) 0 ;
  scm_cache *result = 0 ;
  
  arg1 = (active_pair *)jarg1; 
  result = (scm_cache *) ((arg1)->cache);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_active_pair(void * jarg1) {
  active_pair *arg1 = (active_pair *) 0 ;
  
  arg1 = (active_pair *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_active_file() {
  void * jresult ;
  active_file *result = 0 ;
  
  result = (active_file *)new active_file();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_active_file_file_set(void * jarg1, void * jarg2) {
  active_file *arg1 = (active_file *) 0 ;
  scm_file *arg2 = (scm_file *) 0 ;
  
  arg1 = (active_file *)jarg1; 
  arg2 = (scm_file *)jarg2; 
  if (arg1) (arg1)->file = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_active_file_file_get(void * jarg1) {
  void * jresult ;
  active_file *arg1 = (active_file *) 0 ;
  scm_file *result = 0 ;
  
  arg1 = (active_file *)jarg1; 
  result = (scm_file *) ((arg1)->file);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_active_file_uses_set(void * jarg1, int jarg2) {
  active_file *arg1 = (active_file *) 0 ;
  int arg2 ;
  
  arg1 = (active_file *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->uses = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_active_file_uses_get(void * jarg1) {
  int jresult ;
  active_file *arg1 = (active_file *) 0 ;
  int result;
  
  arg1 = (active_file *)jarg1; 
  result = (int) ((arg1)->uses);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_active_file_index_set(void * jarg1, int jarg2) {
  active_file *arg1 = (active_file *) 0 ;
  int arg2 ;
  
  arg1 = (active_file *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->index = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_active_file_index_get(void * jarg1) {
  int jresult ;
  active_file *arg1 = (active_file *) 0 ;
  int result;
  
  arg1 = (active_file *)jarg1; 
  result = (int) ((arg1)->index);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_active_file(void * jarg1) {
  active_file *arg1 = (active_file *) 0 ;
  
  arg1 = (active_file *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_active_cache() {
  void * jresult ;
  active_cache *result = 0 ;
  
  result = (active_cache *)new active_cache();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_active_cache_cache_set(void * jarg1, void * jarg2) {
  active_cache *arg1 = (active_cache *) 0 ;
  scm_cache *arg2 = (scm_cache *) 0 ;
  
  arg1 = (active_cache *)jarg1; 
  arg2 = (scm_cache *)jarg2; 
  if (arg1) (arg1)->cache = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_active_cache_cache_get(void * jarg1) {
  void * jresult ;
  active_cache *arg1 = (active_cache *) 0 ;
  scm_cache *result = 0 ;
  
  arg1 = (active_cache *)jarg1; 
  result = (scm_cache *) ((arg1)->cache);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_active_cache_uses_set(void * jarg1, int jarg2) {
  active_cache *arg1 = (active_cache *) 0 ;
  int arg2 ;
  
  arg1 = (active_cache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->uses = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_active_cache_uses_get(void * jarg1) {
  int jresult ;
  active_cache *arg1 = (active_cache *) 0 ;
  int result;
  
  arg1 = (active_cache *)jarg1; 
  result = (int) ((arg1)->uses);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_active_cache(void * jarg1) {
  active_cache *arg1 = (active_cache *) 0 ;
  
  arg1 = (active_cache *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_cache_param(void * jarg1) {
  void * jresult ;
  scm_file *arg1 = (scm_file *) 0 ;
  cache_param *result = 0 ;
  
  arg1 = (scm_file *)jarg1; 
  result = (cache_param *)new cache_param(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_cache_param_n_set(void * jarg1, int jarg2) {
  cache_param *arg1 = (cache_param *) 0 ;
  int arg2 ;
  
  arg1 = (cache_param *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->n = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_cache_param_n_get(void * jarg1) {
  int jresult ;
  cache_param *arg1 = (cache_param *) 0 ;
  int result;
  
  arg1 = (cache_param *)jarg1; 
  result = (int) ((arg1)->n);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_cache_param_c_set(void * jarg1, int jarg2) {
  cache_param *arg1 = (cache_param *) 0 ;
  int arg2 ;
  
  arg1 = (cache_param *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->c = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_cache_param_c_get(void * jarg1) {
  int jresult ;
  cache_param *arg1 = (cache_param *) 0 ;
  int result;
  
  arg1 = (cache_param *)jarg1; 
  result = (int) ((arg1)->c);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_cache_param_b_set(void * jarg1, int jarg2) {
  cache_param *arg1 = (cache_param *) 0 ;
  int arg2 ;
  
  arg1 = (cache_param *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_cache_param_b_get(void * jarg1) {
  int jresult ;
  cache_param *arg1 = (cache_param *) 0 ;
  int result;
  
  arg1 = (cache_param *)jarg1; 
  result = (int) ((arg1)->b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_cache_param(void * jarg1) {
  cache_param *arg1 = (cache_param *) 0 ;
  
  arg1 = (cache_param *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_scm_system(int jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  scm_system *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (scm_system *)new scm_system(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_scm_system(void * jarg1) {
  scm_system *arg1 = (scm_system *) 0 ;
  
  arg1 = (scm_system *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_system_render_sphere(void * jarg1, double* jarg2, double* jarg3, int jarg4) {
  scm_system *arg1 = (scm_system *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  
  arg1 = (scm_system *)jarg1; 
  arg2 = jarg2;
  arg3 = jarg3;
  arg4 = (int)jarg4; 
  ((scm_system const *)arg1)->render_sphere((double const *)arg2,(double const *)arg3,arg4);
  
  
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_system_flush_cache(void * jarg1) {
  scm_system *arg1 = (scm_system *) 0 ;
  
  arg1 = (scm_system *)jarg1; 
  (arg1)->flush_cache();
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_system_render_cache(void * jarg1) {
  scm_system *arg1 = (scm_system *) 0 ;
  
  arg1 = (scm_system *)jarg1; 
  (arg1)->render_cache();
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_system_update_cache(void * jarg1) {
  scm_system *arg1 = (scm_system *) 0 ;
  
  arg1 = (scm_system *)jarg1; 
  (arg1)->update_cache();
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_system_flush_queue(void * jarg1) {
  scm_system *arg1 = (scm_system *) 0 ;
  
  arg1 = (scm_system *)jarg1; 
  (arg1)->flush_queue();
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_system_import_queue(void * jarg1, char * jarg2) {
  scm_system *arg1 = (scm_system *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (scm_system *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->import_queue((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_system_export_queue(void * jarg1, void * jarg2) {
  scm_system *arg1 = (scm_system *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (scm_system *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string & type is null", 0);
    return ;
  } 
  (arg1)->export_queue(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_system_append_queue(void * jarg1, void * jarg2) {
  scm_system *arg1 = (scm_system *) 0 ;
  scm_step *arg2 = (scm_step *) 0 ;
  
  arg1 = (scm_system *)jarg1; 
  arg2 = (scm_step *)jarg2; 
  (arg1)->append_queue(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_system_render_queue(void * jarg1) {
  scm_system *arg1 = (scm_system *) 0 ;
  
  arg1 = (scm_system *)jarg1; 
  (arg1)->render_queue();
}


SWIGEXPORT int SWIGSTDCALL CSharp_scm_system_add_scene(void * jarg1, int jarg2) {
  int jresult ;
  scm_system *arg1 = (scm_system *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (scm_system *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->add_scene(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_system_del_scene(void * jarg1, int jarg2) {
  scm_system *arg1 = (scm_system *) 0 ;
  int arg2 ;
  
  arg1 = (scm_system *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->del_scene(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_scm_system_get_scene(void * jarg1, int jarg2) {
  void * jresult ;
  scm_system *arg1 = (scm_system *) 0 ;
  int arg2 ;
  scm_scene *result = 0 ;
  
  arg1 = (scm_system *)jarg1; 
  arg2 = (int)jarg2; 
  result = (scm_scene *)(arg1)->get_scene(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_scm_system_add_step(void * jarg1, int jarg2) {
  int jresult ;
  scm_system *arg1 = (scm_system *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (scm_system *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->add_step(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_system_del_step(void * jarg1, int jarg2) {
  scm_system *arg1 = (scm_system *) 0 ;
  int arg2 ;
  
  arg1 = (scm_system *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->del_step(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_scm_system_get_step(void * jarg1, int jarg2) {
  void * jresult ;
  scm_system *arg1 = (scm_system *) 0 ;
  int arg2 ;
  scm_step *result = 0 ;
  
  arg1 = (scm_system *)jarg1; 
  arg2 = (int)jarg2; 
  result = (scm_step *)(arg1)->get_step(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_scm_system_get_scene_count(void * jarg1) {
  int jresult ;
  scm_system *arg1 = (scm_system *) 0 ;
  int result;
  
  arg1 = (scm_system *)jarg1; 
  result = (int)((scm_system const *)arg1)->get_scene_count();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_scm_system_set_scene_blend(void * jarg1, double jarg2) {
  double jresult ;
  scm_system *arg1 = (scm_system *) 0 ;
  double arg2 ;
  double result;
  
  arg1 = (scm_system *)jarg1; 
  arg2 = (double)jarg2; 
  result = (double)(arg1)->set_scene_blend(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_scm_system_get_step_count(void * jarg1) {
  int jresult ;
  scm_system *arg1 = (scm_system *) 0 ;
  int result;
  
  arg1 = (scm_system *)jarg1; 
  result = (int)((scm_system const *)arg1)->get_step_count();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_scm_system_get_step_blend(void * jarg1, double jarg2) {
  void * jresult ;
  scm_system *arg1 = (scm_system *) 0 ;
  double arg2 ;
  scm_step result;
  
  arg1 = (scm_system *)jarg1; 
  arg2 = (double)jarg2; 
  result = ((scm_system const *)arg1)->get_step_blend(arg2);
  jresult = new scm_step((const scm_step &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_scm_system_get_synchronous(void * jarg1) {
  unsigned int jresult ;
  scm_system *arg1 = (scm_system *) 0 ;
  bool result;
  
  arg1 = (scm_system *)jarg1; 
  result = (bool)((scm_system const *)arg1)->get_synchronous();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_system_set_synchronous(void * jarg1, unsigned int jarg2) {
  scm_system *arg1 = (scm_system *) 0 ;
  bool arg2 ;
  
  arg1 = (scm_system *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_synchronous(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_scm_system_get_current_ground(void * jarg1, double* jarg2) {
  float jresult ;
  scm_system *arg1 = (scm_system *) 0 ;
  double *arg2 = (double *) 0 ;
  float result;
  
  arg1 = (scm_system *)jarg1; 
  arg2 = jarg2;
  result = (float)((scm_system const *)arg1)->get_current_ground((double const *)arg2);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_scm_system_get_minimum_ground(void * jarg1) {
  float jresult ;
  scm_system *arg1 = (scm_system *) 0 ;
  float result;
  
  arg1 = (scm_system *)jarg1; 
  result = (float)((scm_system const *)arg1)->get_minimum_ground();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_scm_system_get_sphere(void * jarg1) {
  void * jresult ;
  scm_system *arg1 = (scm_system *) 0 ;
  scm_sphere *result = 0 ;
  
  arg1 = (scm_system *)jarg1; 
  result = (scm_sphere *)((scm_system const *)arg1)->get_sphere();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_scm_system_get_render(void * jarg1) {
  void * jresult ;
  scm_system *arg1 = (scm_system *) 0 ;
  scm_render *result = 0 ;
  
  arg1 = (scm_system *)jarg1; 
  result = (scm_render *)((scm_system const *)arg1)->get_render();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_scm_system_get_fore(void * jarg1) {
  void * jresult ;
  scm_system *arg1 = (scm_system *) 0 ;
  scm_scene *result = 0 ;
  
  arg1 = (scm_system *)jarg1; 
  result = (scm_scene *)((scm_system const *)arg1)->get_fore();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_scm_system_get_back(void * jarg1) {
  void * jresult ;
  scm_system *arg1 = (scm_system *) 0 ;
  scm_scene *result = 0 ;
  
  arg1 = (scm_system *)jarg1; 
  result = (scm_scene *)((scm_system const *)arg1)->get_back();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_scm_system_acquire_scm(void * jarg1, char * jarg2) {
  int jresult ;
  scm_system *arg1 = (scm_system *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (scm_system *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)(arg1)->acquire_scm((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_scm_system_release_scm(void * jarg1, char * jarg2) {
  int jresult ;
  scm_system *arg1 = (scm_system *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (scm_system *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)(arg1)->release_scm((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_scm_system_find_scene(void * jarg1, char * jarg2) {
  void * jresult ;
  scm_system *arg1 = (scm_system *) 0 ;
  std::string *arg2 = 0 ;
  scm_scene *result = 0 ;
  
  arg1 = (scm_system *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (scm_scene *)((scm_system const *)arg1)->find_scene((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_scm_system_get_cache(void * jarg1, int jarg2) {
  void * jresult ;
  scm_system *arg1 = (scm_system *) 0 ;
  int arg2 ;
  scm_cache *result = 0 ;
  
  arg1 = (scm_system *)jarg1; 
  arg2 = (int)jarg2; 
  result = (scm_cache *)(arg1)->get_cache(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_scm_system_get_file(void * jarg1, int jarg2) {
  void * jresult ;
  scm_system *arg1 = (scm_system *) 0 ;
  int arg2 ;
  scm_file *result = 0 ;
  
  arg1 = (scm_system *)jarg1; 
  arg2 = (int)jarg2; 
  result = (scm_file *)(arg1)->get_file(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_scm_system_get_page_sample(void * jarg1, int jarg2, double* jarg3) {
  float jresult ;
  scm_system *arg1 = (scm_system *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  float result;
  
  arg1 = (scm_system *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3;
  result = (float)(arg1)->get_page_sample(arg2,(double const *)arg3);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_scm_system_get_page_sample4v(void * jarg1, int jarg2, double* jarg3) {
  void * jresult ;
  scm_system *arg1 = (scm_system *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  float *result = 0 ;
  
  arg1 = (scm_system *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3;
  result = (float *)(arg1)->get_page_sample4v(arg2,(double const *)arg3);
  jresult = (void *)result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_scm_system_get_page_status(void * jarg1, int jarg2, long long jarg3) {
  unsigned int jresult ;
  scm_system *arg1 = (scm_system *) 0 ;
  int arg2 ;
  long long arg3 ;
  bool result;
  
  arg1 = (scm_system *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (long long)jarg3; 
  result = (bool)(arg1)->get_page_status(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_system_get_page_bounds(void * jarg1, int jarg2, long long jarg3, void * jarg4, void * jarg5) {
  scm_system *arg1 = (scm_system *) 0 ;
  int arg2 ;
  long long arg3 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  
  arg1 = (scm_system *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (long long)jarg3; 
  arg4 = (float *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
    return ;
  } 
  arg5 = (float *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
    return ;
  } 
  (arg1)->get_page_bounds(arg2,arg3,*arg4,*arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_scm_task__SWIG_0() {
  void * jresult ;
  scm_task *result = 0 ;
  
  result = (scm_task *)new scm_task();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_scm_task__SWIG_1(int jarg1, long long jarg2) {
  void * jresult ;
  int arg1 ;
  long long arg2 ;
  scm_task *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (long long)jarg2; 
  result = (scm_task *)new scm_task(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_scm_task__SWIG_2(int jarg1, long long jarg2, unsigned long long jarg3, int jarg4, int jarg5, int jarg6, unsigned int jarg7, void * jarg8) {
  void * jresult ;
  int arg1 ;
  long long arg2 ;
  uint64 arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  GLuint arg7 ;
  scm_cache *arg8 = (scm_cache *) 0 ;
  scm_task *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (long long)jarg2; 
  arg3 = (uint64)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (GLuint)jarg7; 
  arg8 = (scm_cache *)jarg8; 
  result = (scm_task *)new scm_task(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_task_make_page(void * jarg1, int jarg2, int jarg3) {
  scm_task *arg1 = (scm_task *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (scm_task *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->make_page(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_scm_task_load_page(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  scm_task *arg1 = (scm_task *) 0 ;
  char *arg2 = (char *) 0 ;
  TIFF *arg3 = (TIFF *) 0 ;
  bool result;
  
  arg1 = (scm_task *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (TIFF *)jarg3; 
  result = (bool)(arg1)->load_page((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_task_dump_page(void * jarg1) {
  scm_task *arg1 = (scm_task *) 0 ;
  
  arg1 = (scm_task *)jarg1; 
  (arg1)->dump_page();
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_task_o_set(void * jarg1, unsigned long long jarg2) {
  scm_task *arg1 = (scm_task *) 0 ;
  uint64 arg2 ;
  
  arg1 = (scm_task *)jarg1; 
  arg2 = (uint64)jarg2; 
  if (arg1) (arg1)->o = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_scm_task_o_get(void * jarg1) {
  unsigned long long jresult ;
  scm_task *arg1 = (scm_task *) 0 ;
  uint64 result;
  
  arg1 = (scm_task *)jarg1; 
  result = (uint64) ((arg1)->o);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_task_n_set(void * jarg1, int jarg2) {
  scm_task *arg1 = (scm_task *) 0 ;
  int arg2 ;
  
  arg1 = (scm_task *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->n = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_scm_task_n_get(void * jarg1) {
  int jresult ;
  scm_task *arg1 = (scm_task *) 0 ;
  int result;
  
  arg1 = (scm_task *)jarg1; 
  result = (int) ((arg1)->n);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_task_c_set(void * jarg1, int jarg2) {
  scm_task *arg1 = (scm_task *) 0 ;
  int arg2 ;
  
  arg1 = (scm_task *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->c = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_scm_task_c_get(void * jarg1) {
  int jresult ;
  scm_task *arg1 = (scm_task *) 0 ;
  int result;
  
  arg1 = (scm_task *)jarg1; 
  result = (int) ((arg1)->c);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_task_b_set(void * jarg1, int jarg2) {
  scm_task *arg1 = (scm_task *) 0 ;
  int arg2 ;
  
  arg1 = (scm_task *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_scm_task_b_get(void * jarg1) {
  int jresult ;
  scm_task *arg1 = (scm_task *) 0 ;
  int result;
  
  arg1 = (scm_task *)jarg1; 
  result = (int) ((arg1)->b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_task_u_set(void * jarg1, unsigned int jarg2) {
  scm_task *arg1 = (scm_task *) 0 ;
  GLuint arg2 ;
  
  arg1 = (scm_task *)jarg1; 
  arg2 = (GLuint)jarg2; 
  if (arg1) (arg1)->u = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_scm_task_u_get(void * jarg1) {
  unsigned int jresult ;
  scm_task *arg1 = (scm_task *) 0 ;
  GLuint result;
  
  arg1 = (scm_task *)jarg1; 
  result = (GLuint) ((arg1)->u);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_task_d_set(void * jarg1, unsigned int jarg2) {
  scm_task *arg1 = (scm_task *) 0 ;
  bool arg2 ;
  
  arg1 = (scm_task *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->d = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_scm_task_d_get(void * jarg1) {
  unsigned int jresult ;
  scm_task *arg1 = (scm_task *) 0 ;
  bool result;
  
  arg1 = (scm_task *)jarg1; 
  result = (bool) ((arg1)->d);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_task_p_set(void * jarg1, void * jarg2) {
  scm_task *arg1 = (scm_task *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (scm_task *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->p = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_scm_task_p_get(void * jarg1) {
  void * jresult ;
  scm_task *arg1 = (scm_task *) 0 ;
  void *result = 0 ;
  
  arg1 = (scm_task *)jarg1; 
  result = (void *) ((arg1)->p);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_task_C_set(void * jarg1, void * jarg2) {
  scm_task *arg1 = (scm_task *) 0 ;
  scm_cache *arg2 = (scm_cache *) 0 ;
  
  arg1 = (scm_task *)jarg1; 
  arg2 = (scm_cache *)jarg2; 
  if (arg1) (arg1)->C = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_scm_task_C_get(void * jarg1) {
  void * jresult ;
  scm_task *arg1 = (scm_task *) 0 ;
  scm_cache *result = 0 ;
  
  arg1 = (scm_task *)jarg1; 
  result = (scm_cache *) ((arg1)->C);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_scm_task(void * jarg1) {
  scm_task *arg1 = (scm_task *) 0 ;
  
  arg1 = (scm_task *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_scm_internal_form(unsigned short jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  uint16 arg1 ;
  uint16 arg2 ;
  GLuint result;
  
  arg1 = (uint16)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (GLuint)scm_internal_form(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_scm_external_form(unsigned short jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  uint16 arg1 ;
  uint16 arg2 ;
  GLuint result;
  
  arg1 = (uint16)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (GLuint)scm_external_form(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_scm_external_type(unsigned short jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  uint16 arg1 ;
  uint16 arg2 ;
  GLuint result;
  
  arg1 = (uint16)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (GLuint)scm_external_type(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_scm_pixel_size(unsigned short jarg1, unsigned short jarg2) {
  int jresult ;
  uint16 arg1 ;
  uint16 arg2 ;
  GLsizei result;
  
  arg1 = (uint16)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (GLsizei)scm_pixel_size(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_transfb_sizePerVertex_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  scm_transfb::sizePerVertex = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_scm_transfb_sizePerVertex_get() {
  int jresult ;
  int result;
  
  result = (int)scm_transfb::sizePerVertex;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_transfb_vars_set(void * jarg1) {
  char **arg1 = (char **) 0 ;
  
  arg1 = (char **)jarg1; 
  scm_transfb::vars = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_scm_transfb_vars_get() {
  void * jresult ;
  char **result = 0 ;
  
  result = (char **)scm_transfb::vars;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_transfb_numVars_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  scm_transfb::numVars = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_scm_transfb_numVars_get() {
  int jresult ;
  int result;
  
  result = (int)scm_transfb::numVars;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_transfb_state_set(void * jarg1, int jarg2) {
  scm_transfb *arg1 = (scm_transfb *) 0 ;
  scm_transfb_state arg2 ;
  
  arg1 = (scm_transfb *)jarg1; 
  arg2 = (scm_transfb_state)jarg2; 
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_scm_transfb_state_get(void * jarg1) {
  int jresult ;
  scm_transfb *arg1 = (scm_transfb *) 0 ;
  scm_transfb_state result;
  
  arg1 = (scm_transfb *)jarg1; 
  result = (scm_transfb_state) ((arg1)->state);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_transfb_countVerts_set(void * jarg1, int jarg2) {
  scm_transfb *arg1 = (scm_transfb *) 0 ;
  int arg2 ;
  
  arg1 = (scm_transfb *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->countVerts = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_scm_transfb_countVerts_get(void * jarg1) {
  int jresult ;
  scm_transfb *arg1 = (scm_transfb *) 0 ;
  int result;
  
  arg1 = (scm_transfb *)jarg1; 
  result = (int) ((arg1)->countVerts);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_scm_transfb() {
  void * jresult ;
  scm_transfb *result = 0 ;
  
  result = (scm_transfb *)new scm_transfb();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_transfb_set_num_verts(void * jarg1, unsigned long long jarg2) {
  scm_transfb *arg1 = (scm_transfb *) 0 ;
  unsigned long long arg2 ;
  
  arg1 = (scm_transfb *)jarg1; 
  arg2 = (unsigned long long)jarg2; 
  (arg1)->set_num_verts(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_transfb_count_verts(void * jarg1) {
  scm_transfb *arg1 = (scm_transfb *) 0 ;
  
  arg1 = (scm_transfb *)jarg1; 
  (arg1)->count_verts();
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_transfb_capture_frame(void * jarg1) {
  scm_transfb *arg1 = (scm_transfb *) 0 ;
  
  arg1 = (scm_transfb *)jarg1; 
  (arg1)->capture_frame();
}


SWIGEXPORT int SWIGSTDCALL CSharp_scm_transfb_will_capture_frame(void * jarg1) {
  int jresult ;
  scm_transfb *arg1 = (scm_transfb *) 0 ;
  int result;
  
  arg1 = (scm_transfb *)jarg1; 
  result = (int)(arg1)->will_capture_frame();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_transfb_begin(void * jarg1) {
  scm_transfb *arg1 = (scm_transfb *) 0 ;
  
  arg1 = (scm_transfb *)jarg1; 
  (arg1)->begin();
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_transfb_pause(void * jarg1) {
  scm_transfb *arg1 = (scm_transfb *) 0 ;
  
  arg1 = (scm_transfb *)jarg1; 
  (arg1)->pause();
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_transfb_resume(void * jarg1) {
  scm_transfb *arg1 = (scm_transfb *) 0 ;
  
  arg1 = (scm_transfb *)jarg1; 
  (arg1)->resume();
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_transfb_end(void * jarg1) {
  scm_transfb *arg1 = (scm_transfb *) 0 ;
  
  arg1 = (scm_transfb *)jarg1; 
  (arg1)->end();
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_transfb_add_to_count(void * jarg1, int jarg2) {
  scm_transfb *arg1 = (scm_transfb *) 0 ;
  int arg2 ;
  
  arg1 = (scm_transfb *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->add_to_count(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_transfb_set_size_per_vertex(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  scm_transfb::set_size_per_vertex(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_transfb_set_num_vars(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  scm_transfb::set_num_vars(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_transfb_set_var(int jarg1, char * jarg2) {
  int arg1 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (char *)jarg2; 
  scm_transfb::set_var(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_scm_transfb_num_data(void * jarg1) {
  int jresult ;
  scm_transfb *arg1 = (scm_transfb *) 0 ;
  int result;
  
  arg1 = (scm_transfb *)jarg1; 
  result = (int)(arg1)->num_data();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_scm_transfb_get_data(void * jarg1) {
  void * jresult ;
  scm_transfb *arg1 = (scm_transfb *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (scm_transfb *)jarg1; 
  result = (unsigned char *)(arg1)->get_data();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_scm_transfb_get_data_at(void * jarg1, int jarg2) {
  unsigned char jresult ;
  scm_transfb *arg1 = (scm_transfb *) 0 ;
  int arg2 ;
  unsigned char result;
  
  arg1 = (scm_transfb *)jarg1; 
  arg2 = (int)jarg2; 
  result = (unsigned char)(arg1)->get_data_at(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_scm_transfb_destroy_data(void * jarg1) {
  scm_transfb *arg1 = (scm_transfb *) 0 ;
  
  arg1 = (scm_transfb *)jarg1; 
  (arg1)->destroy_data();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_scm_transfb(void * jarg1) {
  scm_transfb *arg1 = (scm_transfb *) 0 ;
  
  arg1 = (scm_transfb *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_image_flip(int jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (void *)jarg5; 
  image_flip(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_image_read_png(char * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  void *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (int *)jarg4; 
  arg5 = (int *)jarg5; 
  result = (void *)image_read_png((char const *)arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_image_write_png(char * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *arg6 = (void *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (void *)jarg6; 
  image_write_png((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_image_read_jpg(char * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  void *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (int *)jarg4; 
  arg5 = (int *)jarg5; 
  result = (void *)image_read_jpg((char const *)arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_image_write_jpg(char * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *arg6 = (void *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (void *)jarg6; 
  image_write_jpg((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_image_read_tif(char * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, int jarg6) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int arg6 ;
  void *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (int *)jarg4; 
  arg5 = (int *)jarg5; 
  arg6 = (int)jarg6; 
  result = (void *)image_read_tif((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_image_write_tif(char * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, float* jarg6) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  float *arg6 = (float *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = jarg6;
  image_write_tif((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_image_read_tif_result(char * jarg1, int jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  read_tif_results result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  result = image_read_tif_result((char const *)arg1,arg2);
  jresult = new read_tif_results((const read_tif_results &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_image_read(char * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  void *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (int *)jarg4; 
  arg5 = (int *)jarg5; 
  result = (void *)image_read((char const *)arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_image_write(char * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *arg6 = (void *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (void *)jarg6; 
  image_write((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_image_read_float(char * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  float *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (int *)jarg4; 
  arg5 = (int *)jarg5; 
  result = (float *)image_read_float((char const *)arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_image_write_float(char * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  float *arg6 = (float *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (float *)jarg6; 
  image_write_float((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_image_scale_float(int jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  float *arg6 = (float *) 0 ;
  float *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (float *)jarg6; 
  result = (float *)image_scale_float(arg1,arg2,arg3,arg4,arg5,(float const *)arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_image_internal_form(int jarg1, int jarg2) {
  int jresult ;
  int arg1 ;
  int arg2 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)image_internal_form(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_image_external_form(int jarg1) {
  int jresult ;
  int arg1 ;
  int result;
  
  arg1 = (int)jarg1; 
  result = (int)image_external_form(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_image_external_type(int jarg1) {
  int jresult ;
  int arg1 ;
  int result;
  
  arg1 = (int)jarg1; 
  result = (int)image_external_type(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_read_tif_results_w_set(void * jarg1, int jarg2) {
  _read_tif_results *arg1 = (_read_tif_results *) 0 ;
  int arg2 ;
  
  arg1 = (_read_tif_results *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_read_tif_results_w_get(void * jarg1) {
  int jresult ;
  _read_tif_results *arg1 = (_read_tif_results *) 0 ;
  int result;
  
  arg1 = (_read_tif_results *)jarg1; 
  result = (int) ((arg1)->w);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_read_tif_results_h_set(void * jarg1, int jarg2) {
  _read_tif_results *arg1 = (_read_tif_results *) 0 ;
  int arg2 ;
  
  arg1 = (_read_tif_results *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->h = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_read_tif_results_h_get(void * jarg1) {
  int jresult ;
  _read_tif_results *arg1 = (_read_tif_results *) 0 ;
  int result;
  
  arg1 = (_read_tif_results *)jarg1; 
  result = (int) ((arg1)->h);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_read_tif_results_c_set(void * jarg1, int jarg2) {
  _read_tif_results *arg1 = (_read_tif_results *) 0 ;
  int arg2 ;
  
  arg1 = (_read_tif_results *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->c = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_read_tif_results_c_get(void * jarg1) {
  int jresult ;
  _read_tif_results *arg1 = (_read_tif_results *) 0 ;
  int result;
  
  arg1 = (_read_tif_results *)jarg1; 
  result = (int) ((arg1)->c);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_read_tif_results_b_set(void * jarg1, int jarg2) {
  _read_tif_results *arg1 = (_read_tif_results *) 0 ;
  int arg2 ;
  
  arg1 = (_read_tif_results *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_read_tif_results_b_get(void * jarg1) {
  int jresult ;
  _read_tif_results *arg1 = (_read_tif_results *) 0 ;
  int result;
  
  arg1 = (_read_tif_results *)jarg1; 
  result = (int) ((arg1)->b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_read_tif_results_data_set(void * jarg1, void * jarg2) {
  _read_tif_results *arg1 = (_read_tif_results *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (_read_tif_results *)jarg1; 
  arg2 = (float *)jarg2; 
  if (arg1) (arg1)->data = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_read_tif_results_data_get(void * jarg1) {
  void * jresult ;
  _read_tif_results *arg1 = (_read_tif_results *) 0 ;
  float *result = 0 ;
  
  arg1 = (_read_tif_results *)jarg1; 
  result = (float *) ((arg1)->data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_read_tif_results() {
  void * jresult ;
  _read_tif_results *result = 0 ;
  
  result = (_read_tif_results *)new _read_tif_results();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_read_tif_results(void * jarg1) {
  _read_tif_results *arg1 = (_read_tif_results *) 0 ;
  
  arg1 = (_read_tif_results *)jarg1; 
  delete arg1;
}


SWIGEXPORT scm_item * SWIGSTDCALL CSharp_scm_page_SWIGUpcast(scm_page *jarg1) {
    return (scm_item *)jarg1;
}

SWIGEXPORT scm_item * SWIGSTDCALL CSharp_scm_task_SWIGUpcast(scm_task *jarg1) {
    return (scm_item *)jarg1;
}

#ifdef __cplusplus
}
#endif

