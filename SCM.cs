/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class SCM {
  public static int loader(SWIGTYPE_p_void arg0) {
    int ret = SCMPINVOKE.loader(SWIGTYPE_p_void.getCPtr(arg0));
    return ret;
  }

  public static bool scm_load_page(string arg0, long arg1, SWIGTYPE_p_TIFF arg2, ulong arg3, int arg4, int arg5, int arg6, int arg7, SWIGTYPE_p_void arg8) {
    bool ret = SCMPINVOKE.scm_load_page(arg0, arg1, SWIGTYPE_p_TIFF.getCPtr(arg2), arg3, arg4, arg5, arg6, arg7, SWIGTYPE_p_void.getCPtr(arg8));
    return ret;
  }

  public static void toggle_show_indices() {
    SCMPINVOKE.toggle_show_indices();
  }

  public static long log2(long n) {
    long ret = SCMPINVOKE.log2(n);
    return ret;
  }

  public static long scm_page_count(long d) {
    long ret = SCMPINVOKE.scm_page_count(d);
    return ret;
  }

  public static long scm_page_level(long i) {
    long ret = SCMPINVOKE.scm_page_level(i);
    return ret;
  }

  public static long scm_page_root(long i) {
    long ret = SCMPINVOKE.scm_page_root(i);
    return ret;
  }

  public static long scm_page_tile(long i) {
    long ret = SCMPINVOKE.scm_page_tile(i);
    return ret;
  }

  public static long scm_page_row(long i) {
    long ret = SCMPINVOKE.scm_page_row(i);
    return ret;
  }

  public static long scm_page_col(long i) {
    long ret = SCMPINVOKE.scm_page_col(i);
    return ret;
  }

  public static long scm_page_index(long a, long l, long r, long c) {
    long ret = SCMPINVOKE.scm_page_index(a, l, r, c);
    return ret;
  }

  public static long scm_page_parent(long i) {
    long ret = SCMPINVOKE.scm_page_parent(i);
    return ret;
  }

  public static long scm_page_child(long i, long k) {
    long ret = SCMPINVOKE.scm_page_child(i, k);
    return ret;
  }

  public static long scm_page_order(long i) {
    long ret = SCMPINVOKE.scm_page_order(i);
    return ret;
  }

  public static void scm_locate(SWIGTYPE_p_long_long arg0, SWIGTYPE_p_double arg1, SWIGTYPE_p_double arg2, SWIGTYPE_p_double arg3) {
    SCMPINVOKE.scm_locate(SWIGTYPE_p_long_long.getCPtr(arg0), SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(arg2), SWIGTYPE_p_double.getCPtr(arg3));
  }

  public static void scm_vector(long arg0, double arg1, double arg2, SWIGTYPE_p_double arg3) {
    SCMPINVOKE.scm_vector(arg0, arg1, arg2, SWIGTYPE_p_double.getCPtr(arg3));
  }

  public static long scm_page_north(long arg0) {
    long ret = SCMPINVOKE.scm_page_north(arg0);
    return ret;
  }

  public static long scm_page_south(long arg0) {
    long ret = SCMPINVOKE.scm_page_south(arg0);
    return ret;
  }

  public static long scm_page_west(long arg0) {
    long ret = SCMPINVOKE.scm_page_west(arg0);
    return ret;
  }

  public static long scm_page_east(long arg0) {
    long ret = SCMPINVOKE.scm_page_east(arg0);
    return ret;
  }

  public static void scm_page_corners(long arg0, SWIGTYPE_p_double arg1) {
    SCMPINVOKE.scm_page_corners(arg0, SWIGTYPE_p_double.getCPtr(arg1));
  }

  public static void scm_page_center(long arg0, SWIGTYPE_p_double arg1) {
    SCMPINVOKE.scm_page_center(arg0, SWIGTYPE_p_double.getCPtr(arg1));
  }

  public static page_grid scm_page_get_grid(long i, int D) {
    page_grid ret = new page_grid(SCMPINVOKE.scm_page_get_grid(i, D), true);
    return ret;
  }

  public static SWIGTYPE_p_double scm_page_get_center(long arg0) {
    global::System.IntPtr cPtr = SCMPINVOKE.scm_page_get_center(arg0);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    return ret;
  }

  public static void scm_logopen(string arg0) {
    SCMPINVOKE.scm_logopen(arg0);
  }

  public static void scm_log(string arg0) {
    SCMPINVOKE.scm_log(arg0);
  }

  public static void scm_clog(string arg0, string arg1) {
    SCMPINVOKE.scm_clog(arg0, arg1);
  }

  public static void scm_clognoflush(string arg0, string arg1) {
    SCMPINVOKE.scm_clognoflush(arg0, arg1);
  }

  public static void scm_logflush() {
    SCMPINVOKE.scm_logflush();
  }

  public static void scm_logclose() {
    SCMPINVOKE.scm_logclose();
  }

  public static string scm_path_search(string arg0) {
    string ret = SCMPINVOKE.scm_path_search(arg0);
    if (SCMPINVOKE.SWIGPendingException.Pending) throw SCMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint scm_internal_form(ushort arg0, ushort arg1) {
    uint ret = SCMPINVOKE.scm_internal_form(arg0, arg1);
    return ret;
  }

  public static uint scm_external_form(ushort arg0, ushort arg1) {
    uint ret = SCMPINVOKE.scm_external_form(arg0, arg1);
    return ret;
  }

  public static uint scm_external_type(ushort arg0, ushort arg1) {
    uint ret = SCMPINVOKE.scm_external_type(arg0, arg1);
    return ret;
  }

  public static int scm_pixel_size(ushort arg0, ushort arg1) {
    int ret = SCMPINVOKE.scm_pixel_size(arg0, arg1);
    return ret;
  }

  public static void image_flip(int arg0, int arg1, int arg2, int arg3, SWIGTYPE_p_void arg4) {
    SCMPINVOKE.image_flip(arg0, arg1, arg2, arg3, SWIGTYPE_p_void.getCPtr(arg4));
  }

  public static SWIGTYPE_p_void image_read_png(string arg0, SWIGTYPE_p_int arg1, SWIGTYPE_p_int arg2, SWIGTYPE_p_int arg3, SWIGTYPE_p_int arg4) {
    global::System.IntPtr cPtr = SCMPINVOKE.image_read_png(arg0, SWIGTYPE_p_int.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), SWIGTYPE_p_int.getCPtr(arg4));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static void image_write_png(string arg0, int arg1, int arg2, int arg3, int arg4, SWIGTYPE_p_void arg5) {
    SCMPINVOKE.image_write_png(arg0, arg1, arg2, arg3, arg4, SWIGTYPE_p_void.getCPtr(arg5));
  }

  public static SWIGTYPE_p_void image_read_jpg(string arg0, SWIGTYPE_p_int arg1, SWIGTYPE_p_int arg2, SWIGTYPE_p_int arg3, SWIGTYPE_p_int arg4) {
    global::System.IntPtr cPtr = SCMPINVOKE.image_read_jpg(arg0, SWIGTYPE_p_int.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), SWIGTYPE_p_int.getCPtr(arg4));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static void image_write_jpg(string arg0, int arg1, int arg2, int arg3, int arg4, SWIGTYPE_p_void arg5) {
    SCMPINVOKE.image_write_jpg(arg0, arg1, arg2, arg3, arg4, SWIGTYPE_p_void.getCPtr(arg5));
  }

  public static SWIGTYPE_p_void image_read_tif(string name, SWIGTYPE_p_int w, SWIGTYPE_p_int h, SWIGTYPE_p_int c, SWIGTYPE_p_int b, int n) {
    global::System.IntPtr cPtr = SCMPINVOKE.image_read_tif(name, SWIGTYPE_p_int.getCPtr(w), SWIGTYPE_p_int.getCPtr(h), SWIGTYPE_p_int.getCPtr(c), SWIGTYPE_p_int.getCPtr(b), n);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static void image_write_tif(string name, int w, int h, int c, int b, float[] p) {
    SCMPINVOKE.image_write_tif(name, w, h, c, b, p);
  }

  public static read_tif_results image_read_tif_result(string name, int n) {
    read_tif_results ret = new read_tif_results(SCMPINVOKE.image_read_tif_result(name, n), true);
    return ret;
  }

  public static SWIGTYPE_p_void image_read(string arg0, SWIGTYPE_p_int arg1, SWIGTYPE_p_int arg2, SWIGTYPE_p_int arg3, SWIGTYPE_p_int arg4) {
    global::System.IntPtr cPtr = SCMPINVOKE.image_read(arg0, SWIGTYPE_p_int.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), SWIGTYPE_p_int.getCPtr(arg4));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static void image_write(string arg0, int arg1, int arg2, int arg3, int arg4, SWIGTYPE_p_void arg5) {
    SCMPINVOKE.image_write(arg0, arg1, arg2, arg3, arg4, SWIGTYPE_p_void.getCPtr(arg5));
  }

  public static SWIGTYPE_p_float image_read_float(string arg0, SWIGTYPE_p_int arg1, SWIGTYPE_p_int arg2, SWIGTYPE_p_int arg3, SWIGTYPE_p_int arg4) {
    global::System.IntPtr cPtr = SCMPINVOKE.image_read_float(arg0, SWIGTYPE_p_int.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2), SWIGTYPE_p_int.getCPtr(arg3), SWIGTYPE_p_int.getCPtr(arg4));
    SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
    return ret;
  }

  public static void image_write_float(string arg0, int arg1, int arg2, int arg3, int arg4, SWIGTYPE_p_float arg5) {
    SCMPINVOKE.image_write_float(arg0, arg1, arg2, arg3, arg4, SWIGTYPE_p_float.getCPtr(arg5));
  }

  public static SWIGTYPE_p_float image_scale_float(int arg0, int arg1, int arg2, int arg3, int arg4, SWIGTYPE_p_float arg5) {
    global::System.IntPtr cPtr = SCMPINVOKE.image_scale_float(arg0, arg1, arg2, arg3, arg4, SWIGTYPE_p_float.getCPtr(arg5));
    SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
    return ret;
  }

  public static int image_internal_form(int arg0, int arg1) {
    int ret = SCMPINVOKE.image_internal_form(arg0, arg1);
    return ret;
  }

  public static int image_external_form(int arg0) {
    int ret = SCMPINVOKE.image_external_form(arg0);
    return ret;
  }

  public static int image_external_type(int arg0) {
    int ret = SCMPINVOKE.image_external_type(arg0);
    return ret;
  }

}
