/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class scm_image : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal scm_image(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(scm_image obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~scm_image() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SCMPINVOKE.delete_scm_image(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public string get_scm() {
    string ret = SCMPINVOKE.scm_image_get_scm(swigCPtr);
    return ret;
  }

  public string get_name() {
    string ret = SCMPINVOKE.scm_image_get_name(swigCPtr);
    return ret;
  }

  public int get_channel() {
    int ret = SCMPINVOKE.scm_image_get_channel(swigCPtr);
    return ret;
  }

  public float get_normal_min() {
    float ret = SCMPINVOKE.scm_image_get_normal_min(swigCPtr);
    return ret;
  }

  public float get_normal_max() {
    float ret = SCMPINVOKE.scm_image_get_normal_max(swigCPtr);
    return ret;
  }

  public void set_scm(string s) {
    SCMPINVOKE.scm_image_set_scm(swigCPtr, s);
    if (SCMPINVOKE.SWIGPendingException.Pending) throw SCMPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_name(string s) {
    SCMPINVOKE.scm_image_set_name(swigCPtr, s);
    if (SCMPINVOKE.SWIGPendingException.Pending) throw SCMPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_channel(int c) {
    SCMPINVOKE.scm_image_set_channel(swigCPtr, c);
  }

  public void set_normal_min(float k) {
    SCMPINVOKE.scm_image_set_normal_min(swigCPtr, k);
  }

  public void set_normal_max(float k) {
    SCMPINVOKE.scm_image_set_normal_max(swigCPtr, k);
  }

  public bool is_channel(int c) {
    bool ret = SCMPINVOKE.scm_image_is_channel(swigCPtr, c);
    return ret;
  }

  public bool is_height() {
    bool ret = SCMPINVOKE.scm_image_is_height(swigCPtr);
    return ret;
  }

  public scm_image(scm_system arg0) : this(SCMPINVOKE.new_scm_image(scm_system.getCPtr(arg0)), true) {
  }

  public void init_uniforms(uint arg0) {
    SCMPINVOKE.scm_image_init_uniforms(swigCPtr, arg0);
  }

  public void bind(uint arg0, uint arg1) {
    SCMPINVOKE.scm_image_bind(swigCPtr, arg0, arg1);
  }

  public void unbind(uint arg0) {
    SCMPINVOKE.scm_image_unbind(swigCPtr, arg0);
  }

  public void bind_page(uint arg0, int arg1, int arg2, long arg3) {
    SCMPINVOKE.scm_image_bind_page(swigCPtr, arg0, arg1, arg2, arg3);
  }

  public void unbind_page(uint arg0, int arg1) {
    SCMPINVOKE.scm_image_unbind_page(swigCPtr, arg0, arg1);
  }

  public void touch_page(int arg0, long arg1) {
    SCMPINVOKE.scm_image_touch_page(swigCPtr, arg0, arg1);
  }

  public float get_page_sample(double[] v) {
    float ret = SCMPINVOKE.scm_image_get_page_sample(swigCPtr, v);
    return ret;
  }

  public SWIGTYPE_p_float get_page_sample4v(double[] v) {
    global::System.IntPtr cPtr = SCMPINVOKE.scm_image_get_page_sample4v(swigCPtr, v);
    SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
    return ret;
  }

  public void get_page_bounds(long arg0, SWIGTYPE_p_float arg1, SWIGTYPE_p_float arg2) {
    SCMPINVOKE.scm_image_get_page_bounds(swigCPtr, arg0, SWIGTYPE_p_float.getCPtr(arg1), SWIGTYPE_p_float.getCPtr(arg2));
    if (SCMPINVOKE.SWIGPendingException.Pending) throw SCMPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool get_page_status(long arg0) {
    bool ret = SCMPINVOKE.scm_image_get_page_status(swigCPtr, arg0);
    return ret;
  }

}
