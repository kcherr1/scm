/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class scm_file : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal scm_file(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(scm_file obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~scm_file() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SCMPINVOKE.delete_scm_file(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public scm_file(string name) : this(SCMPINVOKE.new_scm_file(name), true) {
    if (SCMPINVOKE.SWIGPendingException.Pending) throw SCMPINVOKE.SWIGPendingException.Retrieve();
  }

  public void activate(scm_cache arg0) {
    SCMPINVOKE.scm_file_activate(swigCPtr, scm_cache.getCPtr(arg0));
  }

  public void deactivate() {
    SCMPINVOKE.scm_file_deactivate(swigCPtr);
  }

  public bool is_active() {
    bool ret = SCMPINVOKE.scm_file_is_active(swigCPtr);
    return ret;
  }

  public bool add_need(scm_task arg0) {
    bool ret = SCMPINVOKE.scm_file_add_need(swigCPtr, scm_task.getCPtr(arg0));
    if (SCMPINVOKE.SWIGPendingException.Pending) throw SCMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool get_page_status(ulong arg0) {
    bool ret = SCMPINVOKE.scm_file_get_page_status(swigCPtr, arg0);
    return ret;
  }

  public virtual ulong get_page_offset(ulong arg0) {
    ulong ret = SCMPINVOKE.scm_file_get_page_offset(swigCPtr, arg0);
    return ret;
  }

  public virtual void get_page_bounds(ulong arg0, SWIGTYPE_p_float arg1, SWIGTYPE_p_float arg2) {
    SCMPINVOKE.scm_file_get_page_bounds(swigCPtr, arg0, SWIGTYPE_p_float.getCPtr(arg1), SWIGTYPE_p_float.getCPtr(arg2));
    if (SCMPINVOKE.SWIGPendingException.Pending) throw SCMPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual float get_page_sample(SWIGTYPE_p_double arg0) {
    float ret = SCMPINVOKE.scm_file_get_page_sample(swigCPtr, SWIGTYPE_p_double.getCPtr(arg0));
    return ret;
  }

  public SWIGTYPE_p_float get_page_sample4v(SWIGTYPE_p_double arg0) {
    global::System.IntPtr cPtr = SCMPINVOKE.scm_file_get_page_sample4v(swigCPtr, SWIGTYPE_p_double.getCPtr(arg0));
    SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
    return ret;
  }

  public virtual uint get_w() {
    uint ret = SCMPINVOKE.scm_file_get_w(swigCPtr);
    return ret;
  }

  public virtual uint get_h() {
    uint ret = SCMPINVOKE.scm_file_get_h(swigCPtr);
    return ret;
  }

  public virtual ushort get_c() {
    ushort ret = SCMPINVOKE.scm_file_get_c(swigCPtr);
    return ret;
  }

  public virtual ushort get_b() {
    ushort ret = SCMPINVOKE.scm_file_get_b(swigCPtr);
    return ret;
  }

  public string get_path() {
    string ret = SCMPINVOKE.scm_file_get_path(swigCPtr);
    return ret;
  }

  public string get_name() {
    string ret = SCMPINVOKE.scm_file_get_name(swigCPtr);
    return ret;
  }

  public ulong find_page(long a, SWIGTYPE_p_double y, SWIGTYPE_p_double x) {
    ulong ret = SCMPINVOKE.scm_file_find_page(swigCPtr, a, SWIGTYPE_p_double.getCPtr(y), SWIGTYPE_p_double.getCPtr(x));
    if (SCMPINVOKE.SWIGPendingException.Pending) throw SCMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
