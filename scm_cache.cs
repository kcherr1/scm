/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class scm_cache : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal scm_cache(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(scm_cache obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~scm_cache() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SCMPINVOKE.delete_scm_cache(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public scm_cache(scm_system arg0, int arg1, int arg2, int arg3) : this(SCMPINVOKE.new_scm_cache(scm_system.getCPtr(arg0), arg1, arg2, arg3), true) {
  }

  public void add_load(scm_task arg0) {
    SCMPINVOKE.scm_cache_add_load(swigCPtr, scm_task.getCPtr(arg0));
    if (SCMPINVOKE.SWIGPendingException.Pending) throw SCMPINVOKE.SWIGPendingException.Retrieve();
  }

  public int get_page(int arg0, long arg1, int arg2, SWIGTYPE_p_int arg3) {
    int ret = SCMPINVOKE.scm_cache_get_page(swigCPtr, arg0, arg1, arg2, SWIGTYPE_p_int.getCPtr(arg3));
    if (SCMPINVOKE.SWIGPendingException.Pending) throw SCMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint get_texture() {
    uint ret = SCMPINVOKE.scm_cache_get_texture(swigCPtr);
    return ret;
  }

  public int get_grid_size() {
    int ret = SCMPINVOKE.scm_cache_get_grid_size(swigCPtr);
    return ret;
  }

  public int get_page_size() {
    int ret = SCMPINVOKE.scm_cache_get_page_size(swigCPtr);
    return ret;
  }

  public void update(int arg0, bool arg1) {
    SCMPINVOKE.scm_cache_update(swigCPtr, arg0, arg1);
  }

  public void render(int arg0, int arg1) {
    SCMPINVOKE.scm_cache_render(swigCPtr, arg0, arg1);
  }

  public void flush() {
    SCMPINVOKE.scm_cache_flush(swigCPtr);
  }

  public static int cache_size {
    set {
      SCMPINVOKE.scm_cache_cache_size_set(value);
    } 
    get {
      int ret = SCMPINVOKE.scm_cache_cache_size_get();
      return ret;
    } 
  }

  public static int cache_threads {
    set {
      SCMPINVOKE.scm_cache_cache_threads_set(value);
    } 
    get {
      int ret = SCMPINVOKE.scm_cache_cache_threads_get();
      return ret;
    } 
  }

  public static int need_queue_size {
    set {
      SCMPINVOKE.scm_cache_need_queue_size_set(value);
    } 
    get {
      int ret = SCMPINVOKE.scm_cache_need_queue_size_get();
      return ret;
    } 
  }

  public static int load_queue_size {
    set {
      SCMPINVOKE.scm_cache_load_queue_size_set(value);
    } 
    get {
      int ret = SCMPINVOKE.scm_cache_load_queue_size_get();
      return ret;
    } 
  }

  public static int loads_per_cycle {
    set {
      SCMPINVOKE.scm_cache_loads_per_cycle_set(value);
    } 
    get {
      int ret = SCMPINVOKE.scm_cache_loads_per_cycle_get();
      return ret;
    } 
  }

}
