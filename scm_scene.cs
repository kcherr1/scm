/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class scm_scene : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal scm_scene(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(scm_scene obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~scm_scene() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SCMPINVOKE.delete_scm_scene(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public scm_scene(scm_system arg0) : this(SCMPINVOKE.new_scm_scene(scm_system.getCPtr(arg0)), true) {
  }

  public uint get_color() {
    uint ret = SCMPINVOKE.scm_scene_get_color(swigCPtr);
    return ret;
  }

  public string get_name() {
    string ret = SCMPINVOKE.scm_scene_get_name(swigCPtr);
    return ret;
  }

  public string get_label() {
    string ret = SCMPINVOKE.scm_scene_get_label(swigCPtr);
    return ret;
  }

  public string get_vert() {
    string ret = SCMPINVOKE.scm_scene_get_vert(swigCPtr);
    return ret;
  }

  public string get_frag() {
    string ret = SCMPINVOKE.scm_scene_get_frag(swigCPtr);
    return ret;
  }

  public void set_color(uint c) {
    SCMPINVOKE.scm_scene_set_color(swigCPtr, c);
  }

  public void set_name(string s) {
    SCMPINVOKE.scm_scene_set_name(swigCPtr, s);
    if (SCMPINVOKE.SWIGPendingException.Pending) throw SCMPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_label(string s) {
    SCMPINVOKE.scm_scene_set_label(swigCPtr, s);
    if (SCMPINVOKE.SWIGPendingException.Pending) throw SCMPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_vert(string s) {
    SCMPINVOKE.scm_scene_set_vert(swigCPtr, s);
    if (SCMPINVOKE.SWIGPendingException.Pending) throw SCMPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_frag(string s) {
    SCMPINVOKE.scm_scene_set_frag(swigCPtr, s);
    if (SCMPINVOKE.SWIGPendingException.Pending) throw SCMPINVOKE.SWIGPendingException.Retrieve();
  }

  public int add_image(int arg0) {
    int ret = SCMPINVOKE.scm_scene_add_image(swigCPtr, arg0);
    return ret;
  }

  public void del_image(int arg0) {
    SCMPINVOKE.scm_scene_del_image(swigCPtr, arg0);
  }

  public scm_image get_image(int arg0) {
    global::System.IntPtr cPtr = SCMPINVOKE.scm_scene_get_image(swigCPtr, arg0);
    scm_image ret = (cPtr == global::System.IntPtr.Zero) ? null : new scm_image(cPtr, false);
    return ret;
  }

  public int get_image_count() {
    int ret = SCMPINVOKE.scm_scene_get_image_count(swigCPtr);
    return ret;
  }

  public void init_uniforms() {
    SCMPINVOKE.scm_scene_init_uniforms(swigCPtr);
  }

  public void draw_label() {
    SCMPINVOKE.scm_scene_draw_label(swigCPtr);
  }

  public void bind(int arg0) {
    SCMPINVOKE.scm_scene_bind(swigCPtr, arg0);
  }

  public void unbind(int arg0) {
    SCMPINVOKE.scm_scene_unbind(swigCPtr, arg0);
  }

  public void bind_page(int arg0, int arg1, int arg2, long arg3) {
    SCMPINVOKE.scm_scene_bind_page(swigCPtr, arg0, arg1, arg2, arg3);
  }

  public void unbind_page(int arg0, int arg1) {
    SCMPINVOKE.scm_scene_unbind_page(swigCPtr, arg0, arg1);
  }

  public void touch_page(int arg0, int arg1, long arg2) {
    SCMPINVOKE.scm_scene_touch_page(swigCPtr, arg0, arg1, arg2);
  }

  public float get_minimum_ground() {
    float ret = SCMPINVOKE.scm_scene_get_minimum_ground(swigCPtr);
    return ret;
  }

  public float get_current_ground(SWIGTYPE_p_double arg0) {
    float ret = SCMPINVOKE.scm_scene_get_current_ground(swigCPtr, SWIGTYPE_p_double.getCPtr(arg0));
    return ret;
  }

  public void get_page_bounds(int arg0, long arg1, SWIGTYPE_p_float arg2, SWIGTYPE_p_float arg3) {
    SCMPINVOKE.scm_scene_get_page_bounds(swigCPtr, arg0, arg1, SWIGTYPE_p_float.getCPtr(arg2), SWIGTYPE_p_float.getCPtr(arg3));
    if (SCMPINVOKE.SWIGPendingException.Pending) throw SCMPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool get_page_status(int arg0, long arg1) {
    bool ret = SCMPINVOKE.scm_scene_get_page_status(swigCPtr, arg0, arg1);
    return ret;
  }

  public uint get_program() {
    uint ret = SCMPINVOKE.scm_scene_get_program(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_int uA {
    set {
      SCMPINVOKE.scm_scene_uA_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = SCMPINVOKE.scm_scene_uA_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int uB {
    set {
      SCMPINVOKE.scm_scene_uB_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = SCMPINVOKE.scm_scene_uB_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public int uM {
    set {
      SCMPINVOKE.scm_scene_uM_set(swigCPtr, value);
    } 
    get {
      int ret = SCMPINVOKE.scm_scene_uM_get(swigCPtr);
      return ret;
    } 
  }

  public int uzoomv {
    set {
      SCMPINVOKE.scm_scene_uzoomv_set(swigCPtr, value);
    } 
    get {
      int ret = SCMPINVOKE.scm_scene_uzoomv_get(swigCPtr);
      return ret;
    } 
  }

  public int uzoomk {
    set {
      SCMPINVOKE.scm_scene_uzoomk_set(swigCPtr, value);
    } 
    get {
      int ret = SCMPINVOKE.scm_scene_uzoomk_get(swigCPtr);
      return ret;
    } 
  }

}
