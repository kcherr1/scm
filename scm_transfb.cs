/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class scm_transfb : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal scm_transfb(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(scm_transfb obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~scm_transfb() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SCMPINVOKE.delete_scm_transfb(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static int sizePerVertex {
    set {
      SCMPINVOKE.scm_transfb_sizePerVertex_set(value);
    } 
    get {
      int ret = SCMPINVOKE.scm_transfb_sizePerVertex_get();
      return ret;
    } 
  }

  public static SWIGTYPE_p_p_char vars {
    set {
      SCMPINVOKE.scm_transfb_vars_set(SWIGTYPE_p_p_char.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = SCMPINVOKE.scm_transfb_vars_get();
      SWIGTYPE_p_p_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_char(cPtr, false);
      return ret;
    } 
  }

  public static int numVars {
    set {
      SCMPINVOKE.scm_transfb_numVars_set(value);
    } 
    get {
      int ret = SCMPINVOKE.scm_transfb_numVars_get();
      return ret;
    } 
  }

  public scm_transfb_state state {
    set {
      SCMPINVOKE.scm_transfb_state_set(swigCPtr, (int)value);
    } 
    get {
      scm_transfb_state ret = (scm_transfb_state)SCMPINVOKE.scm_transfb_state_get(swigCPtr);
      return ret;
    } 
  }

  public int countVerts {
    set {
      SCMPINVOKE.scm_transfb_countVerts_set(swigCPtr, value);
    } 
    get {
      int ret = SCMPINVOKE.scm_transfb_countVerts_get(swigCPtr);
      return ret;
    } 
  }

  public scm_transfb() : this(SCMPINVOKE.new_scm_transfb(), true) {
  }

  public void set_num_verts(ulong numverts) {
    SCMPINVOKE.scm_transfb_set_num_verts(swigCPtr, numverts);
  }

  public void count_verts() {
    SCMPINVOKE.scm_transfb_count_verts(swigCPtr);
  }

  public void capture_frame() {
    SCMPINVOKE.scm_transfb_capture_frame(swigCPtr);
  }

  public int will_capture_frame() {
    int ret = SCMPINVOKE.scm_transfb_will_capture_frame(swigCPtr);
    return ret;
  }

  public void begin() {
    SCMPINVOKE.scm_transfb_begin(swigCPtr);
  }

  public void pause() {
    SCMPINVOKE.scm_transfb_pause(swigCPtr);
  }

  public void resume() {
    SCMPINVOKE.scm_transfb_resume(swigCPtr);
  }

  public void end() {
    SCMPINVOKE.scm_transfb_end(swigCPtr);
  }

  public void add_to_count(int amount) {
    SCMPINVOKE.scm_transfb_add_to_count(swigCPtr, amount);
  }

  public static void set_size_per_vertex(int size) {
    SCMPINVOKE.scm_transfb_set_size_per_vertex(size);
  }

  public static void set_num_vars(int numVars) {
    SCMPINVOKE.scm_transfb_set_num_vars(numVars);
  }

  public static void set_var(int len, string var) {
    SCMPINVOKE.scm_transfb_set_var(len, var);
  }

  public int num_data() {
    int ret = SCMPINVOKE.scm_transfb_num_data(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_unsigned_char get_data() {
    global::System.IntPtr cPtr = SCMPINVOKE.scm_transfb_get_data(swigCPtr);
    SWIGTYPE_p_unsigned_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
    return ret;
  }

  public byte get_data_at(int index) {
    byte ret = SCMPINVOKE.scm_transfb_get_data_at(swigCPtr, index);
    return ret;
  }

  public void destroy_data() {
    SCMPINVOKE.scm_transfb_destroy_data(swigCPtr);
  }

}
